{
  
    
        "post0": {
            "title": "Sorts and Big O Notation",
            "content": "Checkpoint #3 . build sort into data structure | perform BigO analysis and evaluation of best sorts from CB, use sorts from others to compare to yours | support Analysis with runtime data, also analyze number of compares and swaps. Consider space complexity | . public class SelectionSort { public int comparisons = 0; // creates primitive data types public int swaps = 0; // public so it&#39;s used by both methods public static void main(String[] args) { // main method long start = 0; // initializes long which is a primitive data type that stores whole numbers. common type of initialization for a counter or timer that needs to be incremented or decremented as part of a program&#39;s logic long end = 0; // create a new SelectionSort object SelectionSort selectionSort = new SelectionSort(); for (int i=0;i&lt;12;i++) { // create 12 arrays as per requirements // generate 5000 random elements int[] array = new int[5000]; // creates a new array with 5000 integer for (int j=0;j&lt;5000;j++) { array[j] = (int)(Math.random()*50000000); } // for loop generates the elements using random (math.random is only 0-1 so you mulitiply by 500 to get bigger number) // sort the array start += System.currentTimeMillis(); // before you start the sorting, it stores the current time selectionSort.sort(array); // sorts end += System.currentTimeMillis(); // stores the end time } // get average System.out.println(&quot;Average time taken: &quot; + (end-start)/12 + &quot; ms&quot;); System.out.println(&quot;Average comparisons: &quot; + selectionSort.comparisons/12); System.out.println(&quot;Average swaps: &quot; + selectionSort.swaps/12); } public void sort(int[] numbers) { // selection sort algorithm int n = numbers.length; // figures out the length of the array for (int i = 0; i &lt; n - 1; i++) { // for loop used to repeatedly finds the minimum value and swaps it int minIndex = i; // outer loop iterates through array numbers and the minimum value is set to i for (int j = i + 1; j &lt; n; j++) { // The inner loop iterates through unsorted portion of the array after the current index i to the last element the algorithm compares the current element with the minimum element found so far comparisons++; // records the number of comparision if (numbers[j] &lt; numbers[minIndex]) { // inside loop checks if the index is different from the current value minIndex = j; // if it is, the current value is set as the index } } if (minIndex != i) { // stores value of first element in the temp variable and then copying the value of the temporary variable to the minimum element&#39;s original position int temp = numbers[i]; numbers[i] = numbers[minIndex]; numbers[minIndex] = temp; swaps++; // number of swaps is implementing } } System.out.println(&quot;Comparisons: &quot; + comparisons); System.out.println(&quot;Swaps: &quot; + swaps); } } SelectionSort.main(null); . Comparisons: 12497500 Swaps: 4994 Comparisons: 24995000 Swaps: 9984 Comparisons: 37492500 Swaps: 14973 Comparisons: 49990000 Swaps: 19966 Comparisons: 62487500 Swaps: 24961 Comparisons: 74985000 Swaps: 29950 Comparisons: 87482500 Swaps: 34944 Comparisons: 99980000 Swaps: 39935 Comparisons: 112477500 Swaps: 44926 Comparisons: 124975000 Swaps: 49913 Comparisons: 137472500 Swaps: 54905 Comparisons: 149970000 Swaps: 59897 Average time taken: 17 ms Average comparisons: 12497500 Average swaps: 4991 . Evaluation: . selection sort: 17 ms | insertion sort: 6ms | merge sort: 14 ms | bubble sort: 22 ms | insertion sort is the fastest even though it has the highest number of swaps. When I googled it, it said that Insertion sort is faster because it &quot;has less overhead&quot; which basically means that it requires less extra resources (memory, processor, time) than other algorithms. | . HashMap example . import java.util.HashMap; import java.util.Random; public class ExampleHashMapSearch { public static void main(String[] args) { // Create a new HashMap object with 5000 elements HashMap&lt;Integer, String&gt; myHashMap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; 5000; i++) { myHashMap.put(i, &quot;value_&quot; + i); } // Perform 12 searches with random keys int numSearches = 12; // search for 12 different elements int numKeys = 100; int[] searchTimes = new int[numSearches]; Random rand = new Random(); for (int i = 0; i &lt; numSearches; i++) { // Generate random keys to search for int[] keys = new int[numKeys]; for (int j = 0; j &lt; numKeys; j++) { keys[j] = rand.nextInt(5000); } // Search for the keys and record the time taken long startTime = System.nanoTime(); for (int j = 0; j &lt; numKeys; j++) { myHashMap.get(keys[j]); } long endTime = System.nanoTime(); searchTimes[i] = (int) ((endTime - startTime)); // Convert nanoseconds to milliseconds } // Calculate the average search time int sum = 0; for (int i = 0; i &lt; numSearches; i++) { sum += searchTimes[i]; } int avg = sum / numSearches; // Print the results System.out.println(&quot;Average search time: &quot; + avg + &quot; nanoseconds&quot;); } } ExampleHashMapSearch.main(null); . Average search time: 19434 nanoseconds .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2023/04/06/Sorts-and-Big-O-Notation.html",
            "relUrl": "/jupyter/2023/04/06/Sorts-and-Big-O-Notation.html",
            "date": " • Apr 6, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Queue (Checkpoint 2)",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$13$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$13$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . /* * Animal class extends Generics and defines abstract methods */ public class Animal extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // print name only Animal.setOrder(KeyType.name); Animal.print(objs); } } Animal.main(null); . class [LREPL.$JShell$15$Animal; 6 Generic: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 class [LREPL.$JShell$15$Animal; 6 Generic: Animal listed by name Lion Pig Robin Cat Kitty Dog . public class Cupcake extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Cupcake.key = key;} public enum KeyType implements KeyTypes {title, flavor, frosting, sprinkles} // Instance data private final String frosting; private final int sprinkles; private final String flavor; // Constructor Cupcake(String frosting, int sprinkles, String flavor) { this.setType(&quot;Cupcake&quot;); this.frosting = frosting; this.sprinkles = sprinkles; this.flavor = flavor; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Cupcake.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.flavor.equals(this.getKey())) { output += this.flavor; } else if (KeyType.frosting.equals(this.getKey())) { output += this.frosting; } else if (KeyType.sprinkles.equals(this.getKey())) { output += &quot;00&quot; + this.sprinkles; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.flavor + &quot;, &quot; + this.frosting + &quot;, &quot; + this.sprinkles; } return output; } // Test data initializer public static Cupcake[] cupcakes() { return new Cupcake[]{ new Cupcake(&quot;Red&quot;, 4, &quot;Red Velvet&quot;), new Cupcake(&quot;Orange&quot;, 5, &quot;Orange&quot;), new Cupcake(&quot;Yellow&quot;, 6, &quot;Lemon&quot;), new Cupcake(&quot;Green&quot;, 7, &quot;Apple&quot;), new Cupcake(&quot;Blue&quot;, 8, &quot;Blueberry&quot;), new Cupcake(&quot;Purple&quot;, 9, &quot;Blackberry&quot;), new Cupcake(&quot;Pink&quot;, 10, &quot;Strawberry&quot;), new Cupcake(&quot;Tan&quot;, 11, &quot;Vanilla&quot;), new Cupcake(&quot;Brown&quot;, 12, &quot;Chocolate&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Cupcake[] objs = cupcakes(); // print with title Cupcake.setOrder(KeyType.title); Cupcake.print(objs); // print flavor only Cupcake.setOrder(KeyType.flavor); Cupcake.print(objs); } } Cupcake.main(null); . class [LREPL.$JShell$17$Cupcake; 9 Generic: Cupcake listed by title Cupcake: Red Velvet, Red, 4 Cupcake: Orange, Orange, 5 Cupcake: Lemon, Yellow, 6 Cupcake: Apple, Green, 7 Cupcake: Blueberry, Blue, 8 Cupcake: Blackberry, Purple, 9 Cupcake: Strawberry, Pink, 10 Cupcake: Vanilla, Tan, 11 Cupcake: Chocolate, Brown, 12 class [LREPL.$JShell$17$Cupcake; 9 Generic: Cupcake listed by flavor Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . import java.util.Random; /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManagerChanged&lt;T&gt; { // queue data private final String name; // name of queue protected int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object private String lastOperation = &quot;&quot;; private String lastObject = &quot;&quot;; /** * Queue constructor * Title with empty queue */ public QueueManagerChanged(String name) { this.name = name; } public int getCount() { return this.count; } /** * Print any array objects from queue */ public void printQueue() { System.out.println(lastOperation + &quot;: &quot; + lastObject); System.out.print(this.name + &quot; count: &quot; + count); System.out.print(&quot;, data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } public void printIntQueue() { for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } /** * Add an objects to queue */ public void add(T object) { //accepts single generic T Object this.queue.add(object); this.count++; this.lastOperation = &quot;Enqueued&quot;; this.lastObject = object.toString(); } public LinkedList&lt;T&gt; getHead() { return this.queue.getHead(); } public T delete() { //accepts single generic T Object T headObject = this.queue.delete(); this.count--; this.lastOperation = &quot;Dequeued&quot;; this.lastObject = headObject.toString(); return headObject; } public T peek() { //accepts single generic T Object return this.queue.peek(); } public LinkedList&lt;T&gt; getNode(int index) { LinkedList&lt;T&gt; node = queue.getHead(); for (int i = 0; i &lt; index; i++) { node = node.getNext(); } return node; } public void shuffle() { for(LinkedList&lt;T&gt; node1 = queue.getHead(); node1 != null; node1 = node1.getNext()) { Random random = new Random(); int index = random.nextInt(count); LinkedList&lt;T&gt; node2 = getNode(index); T temp = node1.getData(); node1.setData(node2.getData()); node2.setData(temp); // Swap them } } } . Hack 1 . import java.util.*; //this hack wants you to add the elements one by one, print it out each time, then delete them one by one and print it out //the first part of the class first creates the array and I labeled it assignments to go with out project // the next part makes the actual queue manager that will hold the array //the first for loop is the add part because it goes through every element in the array and adds it to the queue manager // after the add method is finished, the for loop for the delete part begins //the delete method works by going through the array and deleting each element from the queue //after it prints it out, the output will look like a christmas tree public class QueueChangeTester { public static void main(String[] args) { // Create an array of strings representing FRQs Object[] Assignments = new String[] { &quot;Arrays: Mastery Check 1&quot;, &quot;Lists: Mastery Check 1&quot;, &quot;Loops: Mastery Check 1&quot;, &quot;Classes: Mastery Check 1&quot;}; // Create a new QueueManagerChanged object QueueManagerChanged qAssignments = new QueueManagerChanged(&quot;Assignments&quot;); // Iterate over the array and add each element to the qFRQs queue for (Object i : Assignments) { qAssignments.add(i); qAssignments.printQueue(); // Print the current state of the queue } // Iterate over the array again and delete each element from the queue for (Object i : Assignments) { qAssignments.delete(); qAssignments.printQueue(); // Print the current state of the queue } } } QueueChangeTester.main(null); . Enqueued: Arrays: Mastery Check 1 Assignments count: 1, data: Arrays: Mastery Check 1 Enqueued: Lists: Mastery Check 1 Assignments count: 2, data: Arrays: Mastery Check 1 Lists: Mastery Check 1 Enqueued: Loops: Mastery Check 1 Assignments count: 3, data: Arrays: Mastery Check 1 Lists: Mastery Check 1 Loops: Mastery Check 1 Enqueued: Classes: Mastery Check 1 Assignments count: 4, data: Arrays: Mastery Check 1 Lists: Mastery Check 1 Loops: Mastery Check 1 Classes: Mastery Check 1 Dequeued: Arrays: Mastery Check 1 Assignments count: 3, data: Lists: Mastery Check 1 Loops: Mastery Check 1 Classes: Mastery Check 1 Dequeued: Lists: Mastery Check 1 Assignments count: 2, data: Loops: Mastery Check 1 Classes: Mastery Check 1 Dequeued: Loops: Mastery Check 1 Assignments count: 1, data: Classes: Mastery Check 1 Dequeued: Classes: Mastery Check 1 Assignments count: 0, data: . Hack 2 . // this hack works to merge two queues // the first part of the class is to initialize the two arrays with the numbers I want to merge and to intialize the the queue managers for each one // the next part was to add the integers in the arrays to the their respective queue manager //I then printed out each queue manager // next I worked to compare the two queue managers by saying that while both queues have numbers or elements, the class QueueCombine { public static void main(String[] args) { // Create three arrays of integers and three queue objects to hold them Object[] ints1 = new Integer[] { 1, 3, 5, 7}; QueueManagerChanged q1 = new QueueManagerChanged(&quot;Queue1&quot;); Object[] ints2 = new Integer[] { 2, 4, 6, 8}; QueueManagerChanged q2 = new QueueManagerChanged(&quot;Queue2&quot;); Object[] ints3 = new Integer[] { }; QueueManagerChanged q3 = new QueueManagerChanged(&quot;Queue3&quot;); // Add the integers in ints1 to q1 for (Object o : ints1) { q1.add(o); } // Add the integers in ints2 to q2 for (Object o : ints2) { q2.add(o); } // Print the initial state of q1 and q2 System.out.print(&quot;Initial Queue First: &quot;); q1.printIntQueue(); System.out.print(&quot;Initial Queue Second: &quot;); q2.printIntQueue(); // Combine q1 and q2 into q3 while (q1.getCount() != 0 || q2.getCount() != 0) { // If both q1 and q2 have elements, compare the first elements and add the smaller one to q3 if (q1.getCount() != 0 &amp;&amp; q2.getCount() != 0) { int i1 = (Integer) q1.peek(); int i2 = (Integer) q2.peek(); if (i1 &lt;= i2) { q3.add(q1.delete()); } else { q3.add(q2.delete()); } } // If only q1 has elements, add the first element to q3 else if (q1.getCount() != 0) { q3.add(q1.delete()); } // If only q2 has elements, add the first element to q3 else if (q2.getCount() !=0) { q3.add(q2.delete()); } else { // Do nothing } } // Print the final state of q3 System.out.print(&quot;Final Queue Third: &quot;); q3.printIntQueue(); } } QueueCombine.main(null); . Initial Queue First: 1 3 5 7 Initial Queue Second: 2 4 6 8 Final Queue Third: 1 2 3 4 5 6 7 8 . Hack 3 . public class QueueShuffle { public static void main(String[] args) { // Create an array of integers Object[] integers = new Integer[] { 1, 2, 3, 4, 5}; // Create a new queue and add the integers to it QueueManagerChanged qIntegers = new QueueManagerChanged(&quot;Numbers&quot;); for (Object i : integers) { qIntegers.add(i); } // Print the original queue System.out.print(&quot;Original Queue:&quot;); qIntegers.printIntQueue(); // Shuffle the queue qIntegers.shuffle(); // Print the shuffled queue System.out.print(&quot;Queue After Shuffling:&quot;); qIntegers.printIntQueue(); } } // Call the main method of the QueueShuffle class QueueShuffle.main(null); . Original Queue:1 2 3 4 5 Queue After Shuffling:2 1 4 3 5 . Hack 4 . import java.util.*; public class ReverseQueue { public static void main(String[] args) { Object[] integers = new Integer[] { 1, 2, 3, 4, 5}; QueueManagerChanged qIntegers = new QueueManagerChanged(&quot;Numbers&quot;); for (Object o : integers) { qIntegers.add(o); } Stack&lt;Object&gt; stack = new Stack&lt;&gt;(); System.out.println(&quot;Stack Initial: &quot; + stack); System.out.print(&quot;Queue Initial: &quot;); qIntegers.printIntQueue(); // Push all elements from queue to stack while (qIntegers.getCount() != 0) { stack.push(qIntegers.delete()); } System.out.println(&quot;Stack Full: &quot; + stack); System.out.print(&quot;Queue when Stacked: &quot;); qIntegers.printIntQueue(); // Pop all elements from stack and add back to queue while (stack.size() != 0) { qIntegers.add(stack.pop()); } // Print the reversed queue System.out.println(&quot;Stack Final: &quot; + stack); System.out.print(&quot;Queue Final: &quot;); qIntegers.printIntQueue(); } } ReverseQueue.main(null); . Stack Initial: [] Queue Initial: 1 2 3 4 5 Stack Full: [1, 2, 3, 4, 5] Queue when Stacked: Stack Final: [] Queue Final: 5 4 3 2 1 .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2023/03/26/checkpoint2.html",
            "relUrl": "/jupyter/2023/03/26/checkpoint2.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Generics Hacks",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * Animal class extends Generics and defines abstract methods */ public class Book extends Generics { // Class data public static KeyTypes key = KeyType.popularity; // static initializer public static void setOrder(KeyTypes key) { Book.key = key; } public enum KeyType implements KeyTypes {popularity, title, genre, rating} // Instance data private final String title; private final String genre; private final int rating; /* constructor * */ public Book(String title, String genre, int rating) { super.setType(&quot;Book&quot;); this.title = title; this.genre = genre; this.rating = rating; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Book.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.title.equals(this.getKey())) { output += this.title; // output = output.substring(output.length() - 2); } else if (KeyType.genre.equals(this.getKey())) { output += this.genre; } else if (KeyType.rating.equals(this.getKey())) { output += this.rating; } else { output += super.getType() + &quot;: &quot; + this.title + &quot;, &quot; + this.genre + &quot;, &quot; + this.rating; } return output; } // Test data initializer public static Book[] Books() { return new Book[]{ new Book(&quot;Percy Jackson&quot;, &quot;Mythology&quot;, 5), new Book(&quot;Harry Potter&quot;, &quot;Fantasy&quot;, 4), new Book(&quot;Hunger Games&quot;, &quot;Dystopian&quot;, 5), new Book(&quot;Maze Runner&quot;, &quot;Dystopian&quot;, 3), }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Book[] objs = Books(); // print with title Book.setOrder(KeyType.popularity); Book.print(objs); // print name only Book.setOrder(KeyType.title); Book.print(objs); } } Book.main(null); . class [LREPL.$JShell$25D$Book; 4 Generic: Book listed by popularity Book: Percy Jackson, Mythology, 5 Book: Harry Potter, Fantasy, 4 Book: Hunger Games, Dystopian, 5 Book: Maze Runner, Dystopian, 3 class [LREPL.$JShell$25D$Book; 4 Generic: Book listed by title Percy Jackson Harry Potter Hunger Games Maze Runner . /* * Animal class extends Generics and defines abstract methods */ public class Candle extends Generics { // Class data public static KeyTypes key = KeyType.collection; // static initializer public static void setOrder(KeyTypes key) { Candle.key = key; } public enum KeyType implements KeyTypes {collection, name, color, scent} // Instance data private final String name; private final String color; private final String scent; /* constructor * */ public Candle(String name, String color, String scent) { super.setType(&quot;Candle&quot;); this.name = name; this.color = color; this.scent = scent; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Candle.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; // output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else if (KeyType.scent.equals(this.getKey())) { output += this.scent; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.scent; } return output; } // Test data initializer public static Candle[] Candles() { return new Candle[]{ new Candle(&quot;Flannel&quot;, &quot;Blue&quot;, &quot;Campfire, Burnt Wood&quot;), new Candle(&quot;Stress Relief&quot;, &quot;White&quot;, &quot;Fresh Spearmint, Clary Sage, Eucalyptus Leaf&quot;), new Candle(&quot;Cypress and Amber&quot;, &quot;Green&quot;, &quot;Dark Cypress, Smoked Amber, Fresh Bergamot&quot;), }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Candle[] objs = Candles(); // print with name Candle.setOrder(KeyType.collection); Candle.print(objs); // print name only Candle.setOrder(KeyType.scent); Candle.print(objs); } } Candle.main(null); . class [LREPL.$JShell$20C$Candle; 3 Generic: Candle listed by collection Candle: Flannel, Blue, Campfire, Burnt Wood Candle: Stress Relief, White, Fresh Spearmint, Clary Sage, Eucalyptus Leaf Candle: Cypress and Amber, Green, Dark Cypress, Smoked Amber, Fresh Bergamot class [LREPL.$JShell$20C$Candle; 3 Generic: Candle listed by scent Campfire, Burnt Wood Fresh Spearmint, Clary Sage, Eucalyptus Leaf Dark Cypress, Smoked Amber, Fresh Bergamot .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2023/03/19/Generics.html",
            "relUrl": "/jupyter/2023/03/19/Generics.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Generics Notes",
            "content": "Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LL implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); . true . Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LL implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); // Collections has a toArray convertion Object[] arr = queue.toArray(); // Empty queue System.out.println(&quot;Empty Queue&quot;); while (queue.size() &gt; 0) // Interate while size System.out.println(queue.remove()); // Iterate of array System.out.println(&quot;Iterate over Array&quot;); for (Object a : arr) // Type is Object from convertion System.out.println(a); . Empty Queue John Jane Bob Iterate over Array John Jane Bob . public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$35$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$35$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . public class Animal extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // print name only Animal.setOrder(KeyType.name); Animal.print(objs); } } Animal.main(null); . class [LREPL.$JShell$37$Animal; 6 Generic: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 class [LREPL.$JShell$37$Animal; 6 Generic: Animal listed by name Lion Pig Robin Cat Kitty Dog . public class Cupcake extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Cupcake.key = key;} public enum KeyType implements KeyTypes {title, flavor, frosting, sprinkles} // Instance data private final String frosting; private final int sprinkles; private final String flavor; // Constructor Cupcake(String frosting, int sprinkles, String flavor) { this.setType(&quot;Cupcake&quot;); this.frosting = frosting; this.sprinkles = sprinkles; this.flavor = flavor; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Cupcake.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.flavor.equals(this.getKey())) { output += this.flavor; } else if (KeyType.frosting.equals(this.getKey())) { output += this.frosting; } else if (KeyType.sprinkles.equals(this.getKey())) { output += &quot;00&quot; + this.sprinkles; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.flavor + &quot;, &quot; + this.frosting + &quot;, &quot; + this.sprinkles; } return output; } // Test data initializer public static Cupcake[] cupcakes() { return new Cupcake[]{ new Cupcake(&quot;Red&quot;, 4, &quot;Red Velvet&quot;), new Cupcake(&quot;Orange&quot;, 5, &quot;Orange&quot;), new Cupcake(&quot;Yellow&quot;, 6, &quot;Lemon&quot;), new Cupcake(&quot;Green&quot;, 7, &quot;Apple&quot;), new Cupcake(&quot;Blue&quot;, 8, &quot;Blueberry&quot;), new Cupcake(&quot;Purple&quot;, 9, &quot;Blackberry&quot;), new Cupcake(&quot;Pink&quot;, 10, &quot;Strawberry&quot;), new Cupcake(&quot;Tan&quot;, 11, &quot;Vanilla&quot;), new Cupcake(&quot;Brown&quot;, 12, &quot;Chocolate&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Cupcake[] objs = cupcakes(); // print with title Cupcake.setOrder(KeyType.title); Cupcake.print(objs); // print flavor only Cupcake.setOrder(KeyType.flavor); Cupcake.print(objs); } } Cupcake.main(null); . class [LREPL.$JShell$39$Cupcake; 9 Generic: Cupcake listed by title Cupcake: Red Velvet, Red, 4 Cupcake: Orange, Orange, 5 Cupcake: Lemon, Yellow, 6 Cupcake: Apple, Green, 7 Cupcake: Blueberry, Blue, 8 Cupcake: Blackberry, Purple, 9 Cupcake: Strawberry, Pink, 10 Cupcake: Vanilla, Tan, 11 Cupcake: Chocolate, Brown, 12 class [LREPL.$JShell$39$Cupcake; 9 Generic: Cupcake listed by flavor Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2023/03/14/Generic-Types-and-Collections.html",
            "relUrl": "/jupyter/2023/03/14/Generic-Types-and-Collections.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "CB MCQ 2015",
            "content": ". What method with positive int parameter... (17) | I chose E (No value is returned because of an infinite loop) but the answer is D (The for loop starts at 1 and increments by 2 for each iteration until it is greater than num. The values of loop that are being added together are 1, 3, 5, ..., num. When loop has the value num + 2, the loop stops preventing num + 2 from being included in the sum, since it is not less than or equal to num.) . Methods start and change it with aliases... (26) | I chose A but the answer is E because Parameters are passed using call by value. Call by value initializes the formal parameters (arr, val, word) with copies of the actual parameters (nums, value, name). When the parameter is a reference variable, the method receives a reference and can mutate the object being referenced but cannot alter the reference itself. Passing an object reference as a parameter will result in the formal parameter and the actual parameter being aliases. . Sorting 1D int array statement count... (28) | I chose C but the answer is B The outer loop iterates one fewer time than the length of the array. The inner loop is dependent on the outer loop, starting at the value of j + 1 and iterating to the end of the array. .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2023/03/13/CB-MCQ.html",
            "relUrl": "/jupyter/2023/03/13/CB-MCQ.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Types",
            "content": "Small Code Exercises . public class IntExample { public static void main(String[] args) { int number = 42; System.out.println(&quot;The number is &quot; + number); } } IntExample.main(null); . The number is 42 . Explanation . Here, I declared the variable &quot;number&quot; as type &quot;int&quot; and gave it the value 42. Since int is a primitive, I am able to assign it this number and print it out. . import java.util.Arrays; public class IntegerWrapperExample { public static void main(String[] args) { Integer[] numbers = { 42, 73, 105 }; System.out.println(&quot;The numbers are &quot; + Arrays.toString(numbers)); } } IntegerWrapperExample.main(null); . The numbers are [42, 73, 105] . Explanation . I converted the first code segment to the corresponding wrapper class of Integer by making an array with the numbers above. I declared the array &quot;numbers&quot; of type &quot;Integer&quot; and assigned it Integer objects. I then printed it out by converting it to a string. . Methods and Control Structures . Methods . - blocks of code that perform a specific task - designed to be reusable and modular - can accept input parameters and return output values . Control Structures . - Determine the flow of the program - enable decisions based on conditions - allow repeating a set of instructions multiple times . Exploring the Teacher&#39;s Code . diverse array matrix contains methods and control structures | contains loops and if statements | data types: int and arrays | . | random This is a way to create a number between 0.0 and 1.0. Usually, the random number will be between 0 and 1. If you want a number in a different range, you need to multiply the random number by how big you want the range to be | . | Do nothing by value doesn&#39;t change any values locally | only changes the subvalue | . | Int by Reference integer value changes locally | . | Menu uses catch, try, and while | . | . DiverseArray.java . // DiverseArray learnings /* All Array and 2D array questions will have similar patterns 1. 1D array int[] arr = { 1, 2, 3, 4, 5 } 2. 2D array int[][] arr2D = { { 1, 2, 3, 4, 5 }, { 2, 3, 4, 5, 6 } } 3. Arrays dimensions are not mutable, but can be established with variable sizes using &quot;new&quot; int[] arr = new int[rows] int[][] arr2D = new int[rows][cols] 4. All iterations can use enhanced or conventional for loops, these apply to both 1D and 2D for (int num : arr) { ... } // enhanced, used when index is not required for (int i = 0; i &lt; arr.length; i++) { ... } // conventional, using arr.length to restrict i 5. Same array comparisons (two indexes), bubble sort like adjacent comparison for(int i = 0; i &lt; sumsLength - 1; i++) { // observe minus for (int j = i + 1; j &lt; sumsLength; j++) { // observe j = i + 1, to offset comparisons */ public class DiverseArray { public static int arraySum(int[] arr) { int sum = 0; // sum initializer // enhanced for loop as values are needed, not index for (int num : arr) { sum += num; System.out.print(num + &quot; t&quot;); // debug } return sum; } public static int[] rowSums(int[][] arr2D) { int rows = arr2D.length; // remember arrays have length int[] sumList = new int[rows]; // size of sumList is based on rows // conventional for loop as index used for sumList for (int i = 0; i &lt; rows; i++) { sumList[i] = arraySum(arr2D[i]); System.out.println(&quot;= t&quot; + sumList[i]); // debug } return sumList; } public static boolean isDiverse(int[][] arr2D) { int [] sums = rowSums(arr2D); int sumsLength = sums.length; // ij loop, two indexes needed in evaluation, similar to bubble sort iteration for(int i = 0; i &lt; sumsLength - 1; i++) { for (int j = i + 1; j &lt; sumsLength; j++) { if (sums[i] == sums[j]) { return false; // leave as soon as you find duplicate } } } return true; // all diverse checks have been made } public static void main(String[] args) { int[][] mat1 = { { 1, 3, 2, 7, 3 }, // row 1 { 10, 10, 4, 6, 2 }, // row 2 { 5, 3, 5, 9, 6 }, // row 3 { 7, 6, 4, 2, 1 } // row 4 }; int[][] mat2 = { { 1, 1, 5, 3, 4 }, // row 1 { 12, 7, 6, 1, 9 }, // row 2 { 8, 11, 10, 2, 5 }, // row 3 { 3, 2, 3, 0, 6 } // row 4 }; System.out.println(&quot;Mat1 Diverse: &quot; + isDiverse(mat1)); System.out.println(); System.out.println(&quot;Mat2 Diverse: &quot; + isDiverse(mat2)); } } . IntByReference.java . public class IntByReference { private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } . IntByValue.java . public class IntByValue { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n += 10: n = &quot; + n); // prints 5 n = n += 10; System.out.println(&quot; tAfter n += 10: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 5; System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } . Matrix.java . // matrix class is used to store and format the output of a matrix public class Matrix { private final int[][] matrix; // store matrix public Matrix(int[][] matrix) { this.matrix = matrix; } // nest for loops to format output of a matrix public String toString() { // construct output of matrix using for loops // outer loop for row StringBuilder output = new StringBuilder(); for (int[] row : matrix) { // inner loop for column for (int cell : row) { output.append((cell==-1) ? &quot; &quot; : String.format(&quot;%x&quot;,cell)).append(&quot; &quot;); } output.append(&quot; n&quot;); // new line } return output.toString(); } // print it backwards matrix public String reverse() { // outer loop starting at end row StringBuilder output = new StringBuilder(); for (int i = matrix.length; 0 &lt; i; i--) { // inner loop for column for (int j = matrix[i-1].length; 0 &lt; j; j--) { output.append((matrix[i-1][j-1]==-1) ? &quot; &quot; : String.format(&quot;%x&quot;,matrix[i-1][j-1])).append(&quot; &quot;); } output.append(&quot; n&quot;); // new line } return output.toString(); } // declare and initialize a matrix for a keypad static int[][] keypad() { return new int[][]{ { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 }, {-1, 0, -1} }; } // declare and initialize a random length arrays static int[][] numbers() { return new int[][]{ { 0, 1 }, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 } }; } // tester method for matrix formatting public static void main(String[] args) { Matrix m0 = new Matrix(keypad()); System.out.println(&quot;Keypad:&quot;); System.out.println(m0); System.out.println(m0.reverse()); Matrix m1 = new Matrix(numbers()); System.out.println(&quot;Numbers Systems:&quot;); System.out.println(m1); System.out.println(m1.reverse()); } } . Menu.java . import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } } . 2021 FRQ: Methods and Control Structures . public class WordMatch { private String secret; // declaring variable secret public WordMatch (String secret) { // constructs WordMatch object with secret string this.secret = secret; } public void setSecret(String secret) { // sets the secret value this.secret = secret; } public int scoreGuess(String guess) { // testing use of control structures which in this case is a for loop // make sure that the condition inside the for loop is possible to be executed and has the right condition to make the code function properly int count = 0; for (int i = 0; i &lt; secret.length(); i++) { // looping over the whole secret not guess if (secret.substring(i).indexOf(guess) == 0) { // start at 0 index and as i increases if index of guess is at the beginning of substring count++; // , then increment count by 1 } } return count * guess.length() * guess.length(); // return the score which is how many times guess appeared in secret and multiply by square of length of guess } public String findBetterGuess (String guess1, String guess2) { // this is using the method of scoreGuess above and is inputing guess1 and guess2 into scoreGuess to check which has the higher // this is methods and control structures because the frq is testing that you know when to use and how to call methods to help advance your code and make it function properly if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { // if the score of guess1 is greater than score of guess2 return guess1; // then guess 1 is the better guess } if (scoreGuess(guess1) &lt; scoreGuess(guess2)) { // if the score of guess1 is less than score of guess2 return guess2; // then guess 2 is the better guess } if (guess2.compareTo(guess1) &gt; 0) { // compare guess1 and guess2 and the alphabetically greater one is returned return guess2; } return guess1; } public static void main(String args[]) { Scanner sc = new Scanner(System.in); // System.out.println(&quot;Enter a guess: &quot;); String guess = sc.nextLine(); String secret = &quot;mississippi&quot;; WordMatch wordMatch = new WordMatch(secret); int score = wordMatch.scoreGuess(guess); System.out.println(&quot;Score for &quot; + guess + &quot; is &quot; + score); // System.out.println(&quot;Enter another guess: &quot; +); String guess1 = sc.nextLine(); // System.out.println(&quot;Enter another guess: &quot; +); String guess2 = sc.nextLine(); String compare = wordMatch.findBetterGuess(guess1, guess2); System.out.println(&quot;The better guess is between &quot; + guess1 + &quot; and &quot; + guess2 + &quot; is: &quot; + compare); sc.close(); } } WordMatch.main(null) . Score for cheese is 0 The better guess is between create and intrude is: intrude .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2023/03/12/data-types.html",
            "relUrl": "/jupyter/2023/03/12/data-types.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Sample Binary Addition (1+1 = 10)",
            "content": "import java.util.Scanner; // import the Scanner class class Main { public static void main(String[] args) { Scanner num = new Scanner(System.in); int num1; Scanner nums = new Scanner(System.in); int num2; // Enter username and press Enter System.out.println(&quot;Enter binary number: &quot;); num1 = num.nextInt(); System.out.println(num1); System.out.println(&quot;Enter binary number: &quot;); num2 = nums.nextInt(); System.out.println(num1); int sum = num1 + num2; String binarySum = Integer.toBinaryString(sum); System.out.println(&quot;Binary Sum of &quot; + num1 + &quot; and &quot; + num2 + &quot; is &quot; + binarySum); } } Main.main(null); . Enter binary number: 8 Enter binary number: 8 Binary Sum of 8 and 9 is 10001 . public class IntByValue { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n += 10: n = &quot; + n); // prints 5 n = n += 10; System.out.println(&quot; tAfter n += 10: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 5; System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } IntByValue.main(null); . Main method before changeInt(n): n = 5 In changeInt method Before n += 10: n = 5 After n += 10: n = 15 Main method after changeInt(n): n = 5 . import java.util.concurrent.atomic.AtomicInteger; public class PassByReference { public static void changeAtomicInteger(AtomicInteger n) { System.out.println(&quot;In changeAtomicInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n.set(n.get() + 10); // at this point, we are clearly working with reference data type System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { AtomicInteger n = new AtomicInteger(5); // unlike conventional wrapper class, this requires new System.out.println(&quot;Main method before changeAtomicInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeAtomicInteger(n); System.out.println(&quot;Main method after changeAtomicInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } PassByReference.main(null); . Main method before changeAtomicInteger(n): n = 5 hash code = 1735759663 In changeAtomicInteger method Before change: n = 5 hash code = 1735759663 After change: n = 15 hash code = 1735759663 Main method after changeAtomicInteger(n): n = 15 hash code = 1735759663 . public class IntByReference { private int value; //property or attribute of the class public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2023/03/06/binary-addition.html",
            "relUrl": "/jupyter/2023/03/06/binary-addition.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Quiz1",
            "content": "Score: 58/66 (88%) . . Question Correction . | The expressions are not equivalent when a has the value false, b has the value true, and c has the value true. | . | This expression will always evaluate to true since x is always either greater than 1000 or less than 1500. | . | The value of (x || y) could be true if x is false and y is true, however, the value of (x || y) &amp;&amp; x would evaluate to false in this case. Therefore, these statements are not equivalent. | . | The expressions are not equivalent when a has the value 2, b has the value 1, c has the value 3, and d has the value 4. | . | Insert the statement lenCount = 0; . between lines 12 and 13. . | . | A constructor signature consists of the constructor name and the parameter list. A correct constructor header does not include a return type | . | This line of code increases the value of surcharge by adding price to it; although the revised code will compile, this is not the intended behavior. | . | Choice I will return the correct value if the element in the array with one element was target. In this case, with the first call to seqSearchRecHelper the value of data[0] would be target and 0 would be returned. | .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2023/01/22/quiz1.html",
            "relUrl": "/2023/01/22/quiz1.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Quiz 2",
            "content": "Score: 48/52 (%) . . Question Correction . | The expressions are not equivalent when a has the value false, b has the value true, and c has the value true. | . | This expression will always evaluate to true since x is always either greater than 1000 or less than 1500. | . | The value of (x || y) could be true if x is false and y is true, however, the value of (x || y) &amp;&amp; x would evaluate to false in this case. Therefore, these statements are not equivalent. | . | The expressions are not equivalent when a has the value 2, b has the value 1, c has the value 3, and d has the value 4. | . | Insert the statement lenCount = 0; . between lines 12 and 13. . | . | A constructor signature consists of the constructor name and the parameter list. A correct constructor header does not include a return type | . | This line of code increases the value of surcharge by adding price to it; although the revised code will compile, this is not the intended behavior. | . | Choice I will return the correct value if the element in the array with one element was target. In this case, with the first call to seqSearchRecHelper the value of data[0] would be target and 0 would be returned. | .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2023/01/22/quiz-2.html",
            "relUrl": "/2023/01/22/quiz-2.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Recursion",
            "content": "Vocab . Big O notation for Hash map, Binary Search, Single loop, Nested Loop Big O notation describes the set of all algorithms that run no worse than a certain speed, no better than a certain speed, and at a certain speed | Shows the number of operations it will perform ## Intro to Recursion | . | a method that calls itself | contains at least one base case and one recursive call | can be replaced with an iterative and give the same result | can traverse string, array, and arrayList objects | . public static void example(int n) { if (n &gt; 0) example (n-1); } . public static void simplerRecur(int n) { System.out.println(n); if (n &gt; 2) simplerRecur(n-1); System.out.println(n); } simplerRecur(4); . 4 3 2 2 3 4 . Merge Sort . can be used to sort ArrayLists | uses a divide and conquer algorithm to sort | divides the array into halves and then calls itself | can merge values into one sorted array | ways to think about it first the mergeSort function splits the arrayList into half and then takes the left side of the list. it then calls merge sort again and halves the list, and does this two more times. Eventually, it is just left with 5 after sorting using all of mergeSort(left) | . | . Recursion Tree . a method for visualizing each recursive case until the base case is reached | recursive blocks call themselves | to finish, must need a special case | .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/12/13/recursion.html",
            "relUrl": "/2022/12/13/recursion.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Extra Credit",
            "content": "This session featured Kathyleen Beveridge and Kris Porter. They both were very intelligent speakers and gave very good advice regarding their careers and life choices. Kathyleen talked about her job path and how it wasn’t a straight line from college to her current job or profession. She mentioned how her path was a zig zag line and that resonated with me because it gave me confidence that I don’t need to have everything figured out immediately. Kathyleen also talked about how she too time off when she felt over-worked and burnt out. I thought that was an amazing choice to make for herself and it gave me something to think about. Usually, in my schoolwork and extra curricular activities, I overwhelm myself and get exhausted and this reminded me to take breaks and rest my mind sometimes. She discussed how in every job she’s worked at, the purpose of the company was to use tech for the good of the people and to help them. This was important to me because I also hope to have a positive impact with the work I’ll do in the future. Kris Porter was also another speaker who was more on the tech side while Kathyleen was on the marketing side. Kris talked about his career and a very cool research project that he did with a robot in a Costa Rican jungle. He emphasized that continuous learning is something that is important to him and I definitely agree with him on that. Both speakers also talked about how being adaptable is crucial to the workforce nowadays with the changing flow of the job market. Overall, I felt as though I learned a lot from the speakers and I am very grateful for being able to listen to them. .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/12/13/Extra-Credit.html",
            "relUrl": "/2022/12/13/Extra-Credit.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "FRQ 4",
            "content": "/** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public class LightBoard { private boolean[][] lights; public LightBoard(int numRows, int numCols) { lights = new boolean[numRows][numCols]; for (int r = 0; r &lt; numRows; r++) { for (int c = 0; c &lt; numCols; c++) { if(Math.random() &lt; 0.4) { lights[r][c] = true; } else { lights[r][c] = false; } } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col) { int count = 0; for (int r = 0; r &gt; lights.length; r++) { if (lights[r][col]) { count++; } } if (lights[row][col] &amp;&amp; count % 2 == 0) { return false; } if (!lights[row][col] &amp;&amp; count % 3 == 0) { return true; } return lights[row][col]; } } LightBoard lightboard = new LightBoard(7,5); System.out.println(lightboard.evaluateLight(0,0)); System.out.println(lightboard.evaluateLight(2,1)); System.out.println(lightboard.evaluateLight(5,3)); . true true false .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/12/12/frq4.html",
            "relUrl": "/2022/12/12/frq4.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Inheritance",
            "content": "Vocab . inheritance, extends a way for attributes and methods to be inherited between clases | extends is what allows you to bring those attributes | . | subclass constuctor, super Keyword 2 A subclass inherits all the members from the superclass while the constructor of the superclass can be invoked from the subclass | Super keyword refers to superclass objects; it is used to call superclass methods and to access the superclass costructor | . | Overloading a method, same name different parameters Overloading a method in java is a feature that allows a class to have more than one method with the same name, but with different parameters | Instead of defining two methods that do the same thing, it is better to overload one | . | Polymorphism: any of overloading, overriding, late binding Polymorphism is the ability of a class to provide different implementations of a method depending on the type of object that is passed to the method | Allows us to perform the same action in many different ways | . | . Inheritance . The ability of a class to derive properties and characteristics from another class ## Writing constructors for subclasses | can reuse the code and add attributes if needed in every subclass. | subclass can also become a super class by extending it again in another subclass | Same for a constructor in which the keyword &#39;super&#39; is used to call the super class constructor and can add additional attributes for personalization ## Overriding methods | Override different implementations to the method of superclass ## Polymorphism | . | used when we have multiple classes that are related by inheritance. ## Object superclass | located at the top of every class hierarchy | all the other classes in hierarchy can use the attributes and methods of the object superclass through inheritance. | . HW . public class Team{ private int scored; private int world_cup_wins; private int wins; public Team(int scored, int world_cup_wins, int wins) { this.scored = scored; this.world_cup_wins = world_cup_wins; this.wins = wins; } public int getscored() { return scored; } public int getWorld_cup_wins() { return world_cup_wins; } public int getWins() { return wins; } @Override public String toString(){ return(&quot; Goals in World Cup: &quot; + this.getscored() + &quot;, World Cup Wins: &quot; + this.getWorld_cup_wins() + &quot;, Wins: &quot; + this.getWins()); } } public class Argentina extends Team { public Argentina(int scored, int world_cup_wins, int wins) { super(scored, world_cup_wins, wins); } } public class Brazil extends Team { public Brazil(int scored, int world_cup_wins, int wins) { super(scored, world_cup_wins, wins); } } public class France extends Team { public France(int scored, int world_cup_wins, int wins) { super(scored, world_cup_wins, wins); } } public class Portugal extends Team { public Portugal(int scored, int world_cup_wins, int wins) { super(scored, world_cup_wins, wins); } } public class Netherlands extends Team { public Netherlands(int scored, int world_cup_wins, int wins) { super(scored, world_cup_wins, wins); } } public class Tester{ public static void main(String[] args){ Team portugal = new Team(12,0,2); System.out.println(&quot;Portugal: &quot; + portugal); Team argentina = new Team(12,2,2); System.out.println(&quot;Argentina: &quot; + argentina); Team brazil = new Team(8,5,2); System.out.println(&quot;Brazil: &quot; + brazil); Team france = new Team(11,2,2); System.out.println(&quot;France: &quot; + france); Team netherlands = new Team(10,0,2); System.out.println(&quot;Netherlands: &quot; + netherlands); } } Tester.main(null); . Portugal: Goals Scored in World Cup: 12, World Cup Wins: 0, Wins: 2 Argentina: Goals Scored in World Cup: 12, World Cup Wins: 2, Wins: 2 Brazil: Goals Scored in World Cup: 8, World Cup Wins: 5, Wins: 2 France: Goals Scored in World Cup: 11, World Cup Wins: 2, Wins: 2 Netherlands: Goals Scored in World Cup: 10, World Cup Wins: 0, Wins: 2 . import java.util.Date; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.time.Period; import java.time.ZoneId; public class Person { private String fruit; private String holiday; public Person (String fruit, String holiday){ this.fruit = fruit; this.holiday = holiday; } public String getfruit(){ return fruit; } public String getholiday(){ return holiday; } public int getAge(){ if (this.holiday != null) { // LocalDate holiday = this.holiday.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(); // return Period.between(holiday, LocalDate.now()).getYears(); // too lazy to use a fruit thing } return -1; } } public class Student extends Person { private int grade; private double gpa; public Student (String fruit, String holiday, int grade, double gpa) { super(fruit, holiday); this.grade = grade; this.gpa = gpa; } public int getGrade(){ return grade; } public double getGPA(){ return gpa; } @Override public String toString(){ return(&quot;fruit: &quot; + this.getfruit() + &quot;, holiday: &quot; + this.getholiday() + &quot;, Month: &quot; + this.getGrade() + &quot;, Day: &quot; + this.getGPA()); } } public class Teacher extends Person { private String subject; public Teacher (String fruit, String holiday, String subject){ super(fruit, holiday); this.subject = subject; } public String getSubject(){ return subject; } @Override public String toString(){ return(&quot;fruit: &quot; + this.getfruit() + &quot;, holiday: &quot; + this.getholiday() + &quot;, Subject: &quot; + this.getSubject()); } } public class Main{ public static void main(String[] args){ Student xmas = new Student(&quot;Cranberries&quot;, &quot;Christmas&quot;, 12, 25); System.out.println(xmas.toString()); Teacher newyear = new Teacher(&quot;Grapes&quot;, &quot;New Year&quot;, &quot;2023&quot;); System.out.println(newyear.toString()); } } Main.main(null); . fruit: Cranberries, holiday: Christmas, Month: 12, Day: 25.0 fruit: Grapes, holiday: New Year, Subject: 2023 .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/12/12/Inheritance.html",
            "relUrl": "/2022/12/12/Inheritance.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Units 1-5",
            "content": "Primitives . What is Java . java has garbage collection | when there is memory and collects the data | multi-threading (runs multiple things at once) | . Primitive vs. Non-primitive . primitives are predefined | non primitives are done by you | . Vocab . main method, tester methods The main method is the entry point for executing a java program | The tester method is the place where examples and parameters can be set to ensure a program runs | . | . Boolean . true/false | one bit ### Int | interger values | 2-3 bits ### Double | decimal values 64 bits ### Variable Naming | letters, numbers, or underscores | no special characters ### Casting | manual vs automatic | narrowing foes from bigger data type to smaller | you have to declare it | . Describing Behavior . use verbage to understand code segments | . HW (due 10/24) . 2006 FRQ (1, 2a, 3a) | . What is Object Oriented Programming . organizes software around objects | . Objects, CLasses, and Methods . classes are blueprints | methods are to reuse code | objects inherit class attributes | methods can be stored | objects are initialized by calling the class | . Vocab . Standard methods: toString(), equals(), hashCode() Standard methods are blocks of code that can be called from another location in the program or class | toString(); returns the given value in string format | equals(); compares two strings and returns true if the strings are equal | hashCode(); returns an integer value generated by a hashing algorithm | . | . Method Declaration . 6 ways | access modifier | return type | method name | parameter list | exception list | method body | . Calling Methods . allows to reuse code | organization | optimization | when making objects on main, it will be static | do main. so that you can use the methods | . Classes . Why do we need classes . essential part of OOP models real world objects in code | . Vocab . **Overloading a method, same name different parameters Overloading a method in java is a feature that allows a class to have more than one method with the same name, but with different parameters | Instead of defining two methods that do the same thing, it is better to overload one | . | **Overriding a method, same signature of a method Method overriding occurs when a subclass has the same method as the parent class | When a subclass provides a particular implementation of a method declared by one of its parent classes | . | **Abstract Class, Abstract Method A abstract class cannot be instantiated but they can be subclassed | An abstract method is a method that has just the method definition but does not contain implementation | . | . Anatomy of a java Class . object: state attributes, behavior, | instance of a class | represented by an instance in the program | . | class defines an abstract data tye | string variables | instance variables: attributes, behaviors | data for objects | . | . Methods and Constructors . methods are behaviors or actions that apply to the objects | constructors create the object | main method tests class and instance variables | . Constructors . special method for instantiation sets initial values | . | default constructor | can have multiple constructors per class | . Documentation with Comments . Commenting . comment with // for a single line | multiple line or documentation comment | helps explain code as you go | . Accessor and Mutator Methods . Accessor Methods . get of methods or getters | allow you to get values or variable | non void methods | return a value of specified data type | . Mutator Methods . set of methods or setters | void methods won&#39;t return values | . Writing Methods . method definition, method signature, method body | camelCase | Object.method() ### Method Return Types | string, int, bool, any object type, void (return no value) | . Keywords in Java . Static Modifier . key word usually used after access modifiers | denotes as belonging to a class | cannot reference static variables universally shared variables and methods among objects ### This | refers to the constructor that is being called in | eliminated confusion between attribute and parameters ### Access Modifiers | restricts scope of classes variables and function | used for encapsulation | prevents misuse of data and methods | . Scope and Access . where a variable can be accessed or used | declaration of variable | 3 levels class level: instance var | method level: local, parameter var | block level: loops, if/else | . | . Code Examples . Homework . 2021 FRQ 1a 3a | . Iteration . Importance . 25% of ap test | to simplify code that would otherwise be repeated | loops, while and for and recursion | . Operators . increment and decrement | . While loops, for loops, recursion, nested loops . While loops . while a specific condition is true the loop will run | set i to a value and increment until the condition is false | . For loops . for each thing in a sequence, it will loop | difference is that while runs while something is true | for loop runs for each thing that is true | . Recursion . similar to while and for | you put it in the function: restate the same function within a function | use the code inside of the code | . NEsted Iteration . not a java method, but a technique | any of the loops are usable | loop inside of a loop | .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/12/08/Units-1-5.html",
            "relUrl": "/2022/12/08/Units-1-5.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "2D Array",
            "content": "an array of arrays: multidimensional array ## Vocab | nested for loops A for loop inside of another for loop. These are used to loop through all the elements in a 2d array. One loop can work through the rows and the other the columns. | . | Out Of Bounds Error happens when a loop goes beyond the last valid index in an array. ## Creating a 2D Array | . | first initialize | . int[][] values; String[][] names; char[][] letters; float[][] floats; double[][] doubles; Object[][] objects; . then you must give it a value Method 1: you can initialize by giving values | Method 2: you can initialize it by giving it a size | . | . Iteration . you could use a for loop then another nested loop | . String[][] alphabet = {{&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;}, {&quot;q&quot;, &quot;w&quot;, &quot;e&quot;, &quot;r&quot;, &quot;t&quot;, &quot;y&quot;, &quot;u&quot;, &quot;i&quot;, &quot;o&quot;, &quot;p&quot;, &quot;[&quot;, &quot;]&quot;, &quot; &quot;}, {&quot;a&quot;, &quot;s&quot;, &quot;d&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;}, {&quot;z&quot;, &quot;x&quot;, &quot;c&quot;, &quot;v&quot;, &quot;b&quot;, &quot;n&quot;, &quot;m&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;}}; for(int i = 0;i&lt;alphabet.length;i++){ for(int j = 0; j &lt; alphabet[i].length;j++){ //nested for loops System.out.print(alphabet[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } . 1 2 3 4 5 6 7 8 9 0 - = q w e r t y u i o p [ ] a s d f g h j k l z x c v b n m , . / . Accessing and Changing Elements of 2D Arrays . you can change element or access elements in 2D arrays with indexes | use [1][2] | . Homework . Create a class for 2D array learning. | Create a method too initialize a 2D array with arbitrary values | Create a method to reverse the 2D array and print out the values | Create a method that asks for the input of a position and it returns the corresponding value | Create a method that multiplies each value in a row and then adds all the products together | Create a new object to test out each method in the main function | . import java.util.Scanner; public class Arrays{ int[][] values; public Arrays(){ int[][] newArray = new int[4][4];; for (int i = 0; i &lt; newArray.length; i++){ for (int j = 0; j &lt; newArray[i].length; j++){ newArray[i][j] = (j+1) * (int) (Math.random()*10); } } this.values = newArray; } public void printArray(){ for(int i = 0; i &lt; values.length; i++){ for(int j = 0; j &lt; values[i].length; j++){ System.out.print(values[i][j] + &quot; &quot;); } System.out.println(); } } public void reverse(){ System.out.println(&quot; n nValues are Backwards&quot;); for(int i = values.length-1;i&gt;=0;i--){ for(int j = values[i].length-1; j &gt;= 0;j--){ System.out.print(values[i][j] + &quot; &quot;); } System.out.println(&quot; &quot;); } } public void index(){ Scanner scanner = new Scanner(System.in); System.out.print(&quot;Row Index?: &quot;); int rowIndex = scanner.nextInt(); System.out.println(rowIndex); System.out.print(&quot;Column Index?: &quot;); int columnIndex = scanner.nextInt(); System.out.println(columnIndex); System.out.print(&quot;Result: &quot;); System.out.println(values[rowIndex][columnIndex]); } public void multiplyThenSum(){ int sum = 0; for(int i = 0; i &lt; values.length; i++){ int multiply = 1; for(int j = 0; j &lt; values[i].length; j++){ multiply *= values[i][j]; } sum += multiply; } System.out.print(&quot;Sum: &quot;); System.out.println(sum); } public static void main(String[] args){ Arrays array = new Arrays(); array.printArray(); array.reverse(); array.index(); array.multiplyThenSum(); } } Arrays.main(null); . 8 12 9 12 4 14 6 4 0 16 15 4 9 0 15 4 Values are Backwards 4 15 0 9 4 15 16 0 4 6 14 4 12 9 12 8 Row Index?: 1 Column Index?: 2 Result: 6 Sum: 11712 .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/12/06/2DArrays.html",
            "relUrl": "/jupyter/2022/12/06/2DArrays.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Array List",
            "content": "Vocab . array collection of similar data types | . | elements each variable in an arrya | . | index and array length index is the value/position assigned to each element | array length is how many elements are in the array ## Introduction to ArrayLists | . | reference type mutable and contains object references | . | array cannot be modified while ArrayLists can | Syntax: ArrayListString&gt; = cars = new ArrayListString&gt;(); | . Traversing . using a for loop, can use for while loop | . Developing Algorithms with ArrayLists . Searching . the locating of data within linear structure | searching a structure includes control structures | for loops are optimal because each elements needs to be specified sequentially | . Sorting . sorting sorts the ArrayList in a specified order ascending | descending | . | . HW . Create an ArrayList that includes 2 of the 4 factors listed below. Find and display the hashCode of an Arraylist before and after being sorted | Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither | Replace 3 elements in an ArrayList with another ArrayList and reverse the order of the new list | . | . import java.util.*; import java.util.Collections; public class Main { public static void main(String args[]){ ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(); numbers.add(2); numbers.add(6); numbers.add(3); numbers.add(7); /*Unsorted List: ArrayList content before sorting*/ System.out.println(&quot;Before Sorting:&quot;); for(Integer num: numbers){ System.out.println(num); } /* Sorting in decreasing order*/ Collections.sort(numbers, Collections.reverseOrder()); /* Sorted List in reverse order*/ System.out.println(&quot;In descending order:&quot;); for(Integer num: numbers){ System.out.println(num); } Collections.swap(numbers, 0, 3); System.out.println(&quot;Swap first and last:&quot;); System.out.println(numbers); } } Main.main(null); . Before Sorting: 2 6 3 7 In descending order: 7 6 3 2 Swap first and last: [2, 6, 3, 7] . class Main1 { public static boolean isSorted(int[] num) { if (num == null || num.length &lt;= 1) { return true; } for (int i = 0; i &lt; num.length - 1; i++) { if (num[i] &gt; num[i + 1]) { return false; } } return true; } public static void main(String[] args) { int[] num = { 1, 2, 3, 4, 5 }; System.out.println(isSorted(num)); // true } } Main1.main(null) . true .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/11/30/ArrayList.html",
            "relUrl": "/jupyter/2022/11/30/ArrayList.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Array Lesson",
            "content": "Vocab . Populating giving the elements in the array values | . | array bounds marks start and end of array | . | traversal going through each element # Arrays | . | type of data structure that contains a collection of data | primitive or referenced | int [] array = | int[] array2 = {10, 9, 8, 7, 6}; | int [] numbers = | enhanced for loops: variables are assigned to values | basic for loop = index variable loops are assigned as 0 and 1 | . HW . public class Array { private int[] values = {0, 2, 4, 6, 8}; public void printValues(){ for(int i = 0; i &lt; values.length; i++){ System.out.println(values[i]); } } public void swapValues(){ int lastElement = values[values.length-1]; values[values.length-1] = values[0]; values[0] = lastElement; } public void replaceZero(){ for(int i = 0; i &lt; values.length; i++){ values[i] = 0; } } public static void main(String[] args){ System.out.println(&quot;Swapping first and last: &quot;); Array swapValues = new Array(); swapValues.swapValues(); swapValues.printValues(); System.out.println(&quot;Replace all with zero: &quot;); Array replaceZero = new Array(); swapValues.replaceZero(); swapValues.printValues(); } } Array.main(null); . Swapping first and last: 8 2 4 6 0 Replace all with zero: 0 0 0 0 0 .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/11/08/arrays.html",
            "relUrl": "/2022/11/08/arrays.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Cb Final Mc",
            "content": ". . I said the answer was I only, but it was II only. I was wrong because it would return the element if the element was was in bounds, but it’s not in thise case. So II would be the right answer. . | | . I chose (myVehicles[v].getMilage()) when the correct answer was (v.getMileage()). This was wrong because v was the index of the myVehicles so I don’t need to reuse myVehicles in the answer. . | | . I chose (k+a1.length -1) but the correct answer is (k+ a1.length). The value of the first was assigned with 1 so the answer I chose would give you the wrong index. . | | . I chose (bear, baboon, zebra, bass, cat, koala) but the right answer is (bear, zebra, bass, cat, koala, baboon). I just made an error with the k &gt;1 when I thought it starts at 1. . | | . I chose (I, II, and III). The correct answer is (I and II). III is wrong because it gives the user with area and volume methods but a box with a smaller surface area or volume can’t necessarily fit in a larger one. . | |",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/11/06/CB-Final-MC.html",
            "relUrl": "/2022/11/06/CB-Final-MC.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Natm",
            "content": ". Night at the Museum was very interestin this trimester. Lots of people came to our website and they seemed to like our ideas. They liked our 2048 games as well as our Desmos API. I like the AP Studio Art displays since the art was beautiful like always. In the future, I would like to improve our website and have more features, but overall, it was a success! .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/11/04/natm.html",
            "relUrl": "/2022/11/04/natm.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "DevOps Video",
            "content": "Authoring Tools . IDEs, Docker, Github | . Deployed System . . . Github . branch management | .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/10/23/devops.html",
            "relUrl": "/2022/10/23/devops.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Writing Classes",
            "content": "Classes . Why do we need classes . essential part of OOP models real world objects in code | . Anatomy of a java Class . object: state attributes, behavior, | instance of a class | represented by an instance in the program | . | class defines an abstract data tye | string variables | instance variables: attributes, behaviors | data for objects | . | . Methods and Constructors . methods are behaviors or actions that apply to the objects | constructors create the object | main method tests class and instance variables | . Constructors . special method for instantiation sets initial values | . | default constructor | can have multiple constructors per class | . Documentation with Comments . Commenting . comment with // for a single line | multiple line or documentation comment | helps explain code as you go | . Accessor and Mutator Methods . Accessor Methods . get of methods or getters | allow you to get values or variable | non void methods | return a value of specified data type | . Mutator Methods . set of methods or setters | void methods won&#39;t return values | . Writing Methods . method definition, method signature, method body | camelCase | Object.method() ### Method Return Types | string, int, bool, any object type, void (return no value) | . Keywords in Java . Static Modifier . key word usually used after access modifiers | denotes as belonging to a class | cannot reference static variables universally shared variables and methods among objects ### This | refers to the constructor that is being called in | eliminated confusion between attribute and parameters ### Access Modifiers | restricts scope of classes variables and function | used for encapsulation | prevents misuse of data and methods | . Scope and Access . where a variable can be accessed or used | declaration of variable | 3 levels class level: instance var | method level: local, parameter var | block level: loops, if/else | . | . Code Examples . Homework . 2021 FRQ 1a 3a | . public int scoreGuess (String guess) int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++){ if (secret.substring(i, i + guess.length()).equals (guess)){ count++; } } return count * guess.length() * guess.length(); public void addMembers(String[] names, int gradYear ){ for( String n : names ){ memberList.add(new MemberInfo( n, gradYear, true) ); } } .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/10/20/classes.html",
            "relUrl": "/2022/10/20/classes.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Iteration Lesson",
            "content": "Importance . 25% of ap test | to simplify code that would otherwise be repeated | loops, while and for and recursion | . Operators . increment and decrement | . While loops, for loops, recursion, nested loops . While loops . while a specific condition is true the loop will run | set i to a value and increment until the condition is false | . For loops . for each thing in a sequence, it will loop | difference is that while runs while something is true | for loop runs for each thing that is true | . Recursion . similar to while and for | you put it in the function: restate the same function within a function | use the code inside of the code | . NEsted Iteration . not a java method, but a technique | any of the loops are usable | loop inside of a loop | . import java.util.Scanner; public class Checker { public static void main(String[] args) { int number; // Create a Scanner object for keyboard input. Scanner keyboard = new Scanner(System.in); // Get a number from the user. System.out.print(&quot;Enter a number in the range of 1 through 100: &quot;); number = keyboard.nextInt(); while (number &gt; 100 || number &lt; 1) { System.out.print(&quot;Invalid input. Enter a number in the range &quot; + &quot;of 1 through 100: &quot;); number = keyboard.nextInt(); } } } Checker.main(null) . public class LoopConversion { public static void main(String[] args) { int count = 0; //convert to for loop for (count=0; count &lt; 5; count ++ ) { System.out.println(&quot;count is &quot; + count); } } } . var i = 0; int count = 1; while (count &lt; 5) { System.out.println(&quot;While Loop: &quot; + i); count ++; } for (count=1; count&lt;5 ; count++) { System.out.println(&quot;For loop: &quot; + i); } . While Loop: 0 While Loop: 0 While Loop: 0 While Loop: 0 For loop: 0 For loop: 0 For loop: 0 For loop: 0 . Homework . Write a program where the user inputs their monthly budget. The loop should then ask the user to input each of their monthly expenses. These expenses should be kept in a running total. The final output should display if the user is over or under their budget for the month, and by how much. | Write a program where a random number is generated. Then the user tries to guess the number. If they guess too high display something to let them know, and same for if they guess a number that is too low. The loop must iterate until the number is guessed correctly. | import java.util.Scanner; public class Numberguesser { public static void guessnumber() { Scanner scanner = new Scanner(System.in); int number = 1 + (int)(100* Math.random()); int i, guess; System.out.println( &quot;A number is chosen between 1 to 100.&quot; + &quot;Guess the number&quot; + &quot; within 5 trials.&quot;); for (i = 0; i &lt; 5; i++) { System.out.println( &quot;Guess a number:&quot;); guess = scanner.nextInt(); if (number == guess) { System.out.println(&quot;You guessed the number.&quot;); break; } else if (number &gt; guess&amp;&amp; i != 5 - 1) { System.out.println(&quot;The number is greater than &quot; + guess); } else if (number &lt; guess &amp;&amp; i != 5 - 1) { System.out.println(&quot;The number is less than &quot; + guess); } } if (i == 5) { System.out.println( &quot;You have used all 5 trials.&quot;); System.out.println( &quot;The number was &quot; + number); } } // Driver Code public static void main(String arg[]) { // Function Call guessnumber(); } } Numberguesser.main(null); . .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/10/19/iteration.html",
            "relUrl": "/2022/10/19/iteration.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Using Ojbects",
            "content": "What is Object Oriented Programming . organizes software around objects | . Objects, CLasses, and Methods . classes are blueprints | methods are to reuse code | objects inherit class attributes | methods can be stored | objects are initialized by calling the class | . Method Declaration . 6 ways | access modifier | return type | method name | parameter list | exception list | method body | . Calling Methods . allows to reuse code | organization | optimization | when making objects on main, it will be static | do main. so that you can use the methods | . Homework . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName()); if (Math.random() &lt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has died&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has died&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;bob&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.8); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;rob&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(0.8); fight(goblin1, goblin2); } } Duel.main(null); .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/10/13/using-objects.html",
            "relUrl": "/2022/10/13/using-objects.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Primitive Lesson 10/12",
            "content": "What is Java . java has garbage collection | when there is memory and collects the data | multi-threading (runs multiple things at once) | | . Primitive vs. Non-primitive . primitives are predefined | non primitives are done by you | . Primitives . Boolean . true/false | one bit ### Int | interger values | 2-3 bits ### Double | decimal values 64 bits ### Variable Naming | letters, numbers, or underscores | no special characters ### Casting | manual vs automatic | narrowing foes from bigger data type to smaller | you have to declare it | . Describing Behavior . use verbage to understand code segments | . HW (due 10/24) . 2006 FRQ (1, 2a, 3a) | . 2006 FRQ . 2a) public double purchasePrice() { return getListPrice() * (1+taxRate); } . 3a) public int compareCustomer(Customer other) { int compare = getName().compareTo(other.getName()); if (compare == 0) { return getID() - other.getID(); } else { return compare; } } .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/10/12/primitive-lesson.html",
            "relUrl": "/jupyter/2022/10/12/primitive-lesson.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Databases",
            "content": "import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . | import lombok.AllArgsConstructor; package lombok does not exist . import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; // JPA is an object-relational mapping (ORM) to persistent data, originally relational databases (SQL). Today JPA implementations has been extended for NoSQL. public interface JokesJpaRepository extends JpaRepository&lt;Jokes, Long&gt; { // JPA has many built in methods, these few have been prototyped for this application void save(String Joke); // A List&lt;Jokes&gt; findAllByOrderByJokeAsc(); // returns a List of Jokes in Ascending order List&lt;Jokes&gt; findByJokeIgnoreCase(String joke); // look to see if Joke(s) exist } . | import org.springframework.data.jpa.repository.JpaRepository; package org.springframework.data.jpa.repository does not exist . import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import java.util.List; import java.util.Optional; @RestController // annotation to simplify the creation of RESTful web services @RequestMapping(&quot;/api/jokes&quot;) // all requests in file begin with this URI public class JokesApiController { // Autowired enables Control to connect URI request and POJO Object to easily for Database CRUD operations @Autowired private JokesJpaRepository repository; /* GET List of Jokes * @GetMapping annotation is used for mapping HTTP GET requests onto specific handler methods. */ @GetMapping(&quot;/&quot;) public ResponseEntity&lt;List&lt;Jokes&gt;&gt; getJokes() { // ResponseEntity returns List of Jokes provide by JPA findAll() return new ResponseEntity&lt;&gt;( repository.findAll(), HttpStatus.OK); } /* Update Like * @PutMapping annotation is used for mapping HTTP PUT requests onto specific handler methods. * @PathVariable annotation extracts the templated part {id}, from the URI */ @PutMapping(&quot;/like/{id}&quot;) public ResponseEntity&lt;Jokes&gt; setLike(@PathVariable long id) { /* * Optional (below) is a container object which helps determine if a result is present. * If a value is present, isPresent() will return true * get() will return the value. */ Optional&lt;Jokes&gt; optional = repository.findById(id); if (optional.isPresent()) { // Good ID Jokes joke = optional.get(); // value from findByID joke.setHaha(joke.getHaha()+1); // increment value repository.save(joke); // save entity return new ResponseEntity&lt;&gt;(joke, HttpStatus.OK); // OK HTTP response: status code, headers, and body } // Bad ID return new ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST); // Failed HTTP response: status code, headers, and body } /* Update Jeer */ @PutMapping(&quot;/jeer/{id}&quot;) public ResponseEntity&lt;Jokes&gt; setJeer(@PathVariable long id) { Optional&lt;Jokes&gt; optional = repository.findById(id); if (optional.isPresent()) { // Good ID Jokes joke = optional.get(); joke.setBoohoo(joke.getBoohoo()+1); repository.save(joke); return new ResponseEntity&lt;&gt;(joke, HttpStatus.OK); } // Bad ID return new ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST); } } . | import org.springframework.beans.factory.annotation.Autowired; package org.springframework.beans.factory.annotation does not exist .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/10/10/databses.html",
            "relUrl": "/jupyter/2022/10/10/databses.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Array List Java Notebook",
            "content": "import java.util.ArrayList; //import array list class public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; bodyparts = new ArrayList&lt;String&gt;(); bodyparts.add(&quot;arms&quot;); bodyparts.add(&quot;legs&quot;); bodyparts.add(&quot;skull&quot;); bodyparts.add(&quot;trachea&quot;); bodyparts.add(&quot;toes&quot;); System.out.println(bodyparts); } } Main.main(null) . [arms, legs, skull, trachea, toes] . import java.util.ArrayList; //import array list class public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; bodyparts = new ArrayList&lt;String&gt;(); bodyparts.add(&quot;arms&quot;); bodyparts.add(&quot;legs&quot;); bodyparts.add(&quot;skull&quot;); bodyparts.add(&quot;trachea&quot;); bodyparts.add(&quot;toes&quot;); System.out.println(bodyparts.get(4)); } } Main.main(null) . toes . import java.util.ArrayList; //import array list class public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; bodyparts = new ArrayList&lt;String&gt;(); bodyparts.add(&quot;arms&quot;); bodyparts.add(&quot;legs&quot;); bodyparts.add(&quot;skull&quot;); bodyparts.add(&quot;trachea&quot;); bodyparts.add(&quot;toes&quot;); System.out.println(bodyparts.size()); } } Main.main(null) . 5 . import java.util.ArrayList; //import array list class public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; bodyparts = new ArrayList&lt;String&gt;(); bodyparts.add(&quot;arms&quot;); bodyparts.add(&quot;legs&quot;); bodyparts.add(&quot;skull&quot;); bodyparts.add(&quot;trachea&quot;); bodyparts.add(&quot;toes&quot;); System.out.println(bodyparts); bodyparts.set(2, &quot;kneecaps&quot;); System.out.println(&quot;Modified: &quot; + bodyparts); } } Main.main(null) . [arms, legs, skull, trachea, toes] Modified: [arms, legs, kneecaps, trachea, toes] .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/10/09/arraylist.html",
            "relUrl": "/jupyter/2022/10/09/arraylist.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Java API / RapidAPI",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://earthquake-monitor.p.rapidapi.com/recent&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;cb6c4ae0c0mshf7c680cd7f9687bp1c11edjsnd948864f5be3&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;earthquake-monitor.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . [{&#34;event_number&#34;:&#34;1175154&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175154&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;07:07:52.8&#34;,&#34;time_ago&#34;:&#34;20min ago&#34;,&#34;latitude&#34;:&#34;32.96 N&#34;,&#34;longitude&#34;:&#34;115.88 W&#34;,&#34;depth&#34;:&#34;11 km&#34;,&#34;magnitude&#34;:&#34;2.3&#34;,&#34;magnitude_type&#34;:&#34;Ml&#34;,&#34;location&#34;:&#34;SOUTHERN CALIFORNIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 07:11&#34;},{&#34;event_number&#34;:&#34;1175155&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175155&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;07:00:43.5&#34;,&#34;time_ago&#34;:&#34;27min ago&#34;,&#34;latitude&#34;:&#34;56.44 S&#34;,&#34;longitude&#34;:&#34;26.04 W&#34;,&#34;depth&#34;:&#34;40 km&#34;,&#34;magnitude&#34;:&#34;5.5&#34;,&#34;magnitude_type&#34;:&#34;Mw&#34;,&#34;location&#34;:&#34;SOUTH SANDWICH ISLANDS REGION&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 07:21&#34;},{&#34;event_number&#34;:&#34;1175149&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175149&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:52:17.0&#34;,&#34;time_ago&#34;:&#34;35min ago&#34;,&#34;latitude&#34;:&#34;10.85 N&#34;,&#34;longitude&#34;:&#34;85.13 W&#34;,&#34;depth&#34;:&#34;6 km&#34;,&#34;magnitude&#34;:&#34;2.9&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;COSTA RICA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:55&#34;},{&#34;event_number&#34;:&#34;1175147&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175147&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:44:05.0&#34;,&#34;time_ago&#34;:&#34;44min ago&#34;,&#34;latitude&#34;:&#34;2.03 N&#34;,&#34;longitude&#34;:&#34;98.97 E&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;2.5&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;NORTHERN SUMATRA, INDONESIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:50&#34;},{&#34;event_number&#34;:&#34;1175141&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175141&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:36:52.0&#34;,&#34;time_ago&#34;:&#34;51min ago&#34;,&#34;latitude&#34;:&#34;19.46 N&#34;,&#34;longitude&#34;:&#34;155.65 W&#34;,&#34;depth&#34;:&#34;-4 km&#34;,&#34;magnitude&#34;:&#34;2.4&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;ISLAND OF HAWAII, HAWAII&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:42&#34;},{&#34;event_number&#34;:&#34;1175150&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175150&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:34:54.2&#34;,&#34;time_ago&#34;:&#34;53min ago&#34;,&#34;latitude&#34;:&#34;25.56 S&#34;,&#34;longitude&#34;:&#34;129.97 E&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;3.1&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;NORTHERN TERRITORY, AUSTRALIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:55&#34;},{&#34;event_number&#34;:&#34;1175139&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175139&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:33:16.2&#34;,&#34;time_ago&#34;:&#34;54min ago&#34;,&#34;latitude&#34;:&#34;19.46 N&#34;,&#34;longitude&#34;:&#34;155.64 W&#34;,&#34;depth&#34;:&#34;4 km&#34;,&#34;magnitude&#34;:&#34;3.0&#34;,&#34;magnitude_type&#34;:&#34;Ml&#34;,&#34;location&#34;:&#34;ISLAND OF HAWAII, HAWAII&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:50&#34;},{&#34;event_number&#34;:&#34;1175146&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175146&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:31:53.3&#34;,&#34;time_ago&#34;:&#34;56min ago&#34;,&#34;latitude&#34;:&#34;17.93 N&#34;,&#34;longitude&#34;:&#34;67.08 W&#34;,&#34;depth&#34;:&#34;7 km&#34;,&#34;magnitude&#34;:&#34;2.7&#34;,&#34;magnitude_type&#34;:&#34;Md&#34;,&#34;location&#34;:&#34;PUERTO RICO REGION&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:48&#34;},{&#34;event_number&#34;:&#34;1175132&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175132&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:16:26.3&#34;,&#34;time_ago&#34;:&#34;1hr 11min ago&#34;,&#34;latitude&#34;:&#34;32.96 N&#34;,&#34;longitude&#34;:&#34;115.89 W&#34;,&#34;depth&#34;:&#34;12 km&#34;,&#34;magnitude&#34;:&#34;2.7&#34;,&#34;magnitude_type&#34;:&#34;Ml&#34;,&#34;location&#34;:&#34;SOUTHERN CALIFORNIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:19&#34;},{&#34;event_number&#34;:&#34;1175131&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175131&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:04:15.6&#34;,&#34;time_ago&#34;:&#34;1hr 23min ago&#34;,&#34;latitude&#34;:&#34;28.56 N&#34;,&#34;longitude&#34;:&#34;17.85 W&#34;,&#34;depth&#34;:&#34;12 km&#34;,&#34;magnitude&#34;:&#34;1.5&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;CANARY ISLANDS, SPAIN REGION&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:12&#34;},{&#34;event_number&#34;:&#34;1175135&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175135&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:02:55.0&#34;,&#34;time_ago&#34;:&#34;1hr 25min ago&#34;,&#34;latitude&#34;:&#34;22.40 S&#34;,&#34;longitude&#34;:&#34;68.97 W&#34;,&#34;depth&#34;:&#34;109 km&#34;,&#34;magnitude&#34;:&#34;2.6&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;ANTOFAGASTA, CHILE&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:23&#34;},{&#34;event_number&#34;:&#34;1175128&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175128&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:02:46.9&#34;,&#34;time_ago&#34;:&#34;1hr 25min ago&#34;,&#34;latitude&#34;:&#34;28.55 N&#34;,&#34;longitude&#34;:&#34;17.87 W&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;1.7&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;CANARY ISLANDS, SPAIN REGION&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:09&#34;},{&#34;event_number&#34;:&#34;1175126&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175126&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;06:00:00.9&#34;,&#34;time_ago&#34;:&#34;1hr 28min ago&#34;,&#34;latitude&#34;:&#34;36.00 N&#34;,&#34;longitude&#34;:&#34;21.55 E&#34;,&#34;depth&#34;:&#34;2 km&#34;,&#34;magnitude&#34;:&#34;2.6&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SOUTHERN GREECE&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:24&#34;},{&#34;event_number&#34;:&#34;1175125&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175125&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;05:53:48.3&#34;,&#34;time_ago&#34;:&#34;1hr 34min ago&#34;,&#34;latitude&#34;:&#34;37.30 N&#34;,&#34;longitude&#34;:&#34;2.19 W&#34;,&#34;depth&#34;:&#34;24 km&#34;,&#34;magnitude&#34;:&#34;1.9&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SPAIN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:04&#34;},{&#34;event_number&#34;:&#34;1175127&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175127&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;05:36:53.2&#34;,&#34;time_ago&#34;:&#34;1hr 51min ago&#34;,&#34;latitude&#34;:&#34;19.18 N&#34;,&#34;longitude&#34;:&#34;65.50 W&#34;,&#34;depth&#34;:&#34;48 km&#34;,&#34;magnitude&#34;:&#34;3.4&#34;,&#34;magnitude_type&#34;:&#34;Md&#34;,&#34;location&#34;:&#34;PUERTO RICO REGION&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:08&#34;},{&#34;event_number&#34;:&#34;1175124&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175124&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;05:34:36.8&#34;,&#34;time_ago&#34;:&#34;1hr 53min ago&#34;,&#34;latitude&#34;:&#34;6.47 S&#34;,&#34;longitude&#34;:&#34;130.09 E&#34;,&#34;depth&#34;:&#34;134 km&#34;,&#34;magnitude&#34;:&#34;4.4&#34;,&#34;magnitude_type&#34;:&#34;mb&#34;,&#34;location&#34;:&#34;BANDA SEA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:45&#34;},{&#34;event_number&#34;:&#34;1175123&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175123&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;05:26:22.0&#34;,&#34;time_ago&#34;:&#34;2hr 01min ago&#34;,&#34;latitude&#34;:&#34;38.15 S&#34;,&#34;longitude&#34;:&#34;74.92 W&#34;,&#34;depth&#34;:&#34;16 km&#34;,&#34;magnitude&#34;:&#34;2.5&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;OFF COAST OF ARAUCANIA, CHILE&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 05:40&#34;},{&#34;event_number&#34;:&#34;1175122&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175122&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;05:26:02.0&#34;,&#34;time_ago&#34;:&#34;2hr 02min ago&#34;,&#34;latitude&#34;:&#34;45.49 N&#34;,&#34;longitude&#34;:&#34;7.57 E&#34;,&#34;depth&#34;:&#34;4 km&#34;,&#34;magnitude&#34;:&#34;0.9&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;NORTHERN ITALY&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:14&#34;},{&#34;event_number&#34;:&#34;1175121&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175121&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;05:18:39.0&#34;,&#34;time_ago&#34;:&#34;2hr 09min ago&#34;,&#34;latitude&#34;:&#34;2.11 N&#34;,&#34;longitude&#34;:&#34;99.00 E&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;2.9&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;NORTHERN SUMATRA, INDONESIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 05:25&#34;},{&#34;event_number&#34;:&#34;1175115&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175115&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:54:27.0&#34;,&#34;time_ago&#34;:&#34;2hr 33min ago&#34;,&#34;latitude&#34;:&#34;2.10 N&#34;,&#34;longitude&#34;:&#34;98.91 E&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;2.7&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;NORTHERN SUMATRA, INDONESIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 05:00&#34;},{&#34;event_number&#34;:&#34;1175112&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175112&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:48:02.5&#34;,&#34;time_ago&#34;:&#34;2hr 40min ago&#34;,&#34;latitude&#34;:&#34;19.18 N&#34;,&#34;longitude&#34;:&#34;155.44 W&#34;,&#34;depth&#34;:&#34;33 km&#34;,&#34;magnitude&#34;:&#34;3.1&#34;,&#34;magnitude_type&#34;:&#34;Ml&#34;,&#34;location&#34;:&#34;ISLAND OF HAWAII, HAWAII&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 04:53&#34;},{&#34;event_number&#34;:&#34;1175118&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175118&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:41:38.9&#34;,&#34;time_ago&#34;:&#34;2hr 46min ago&#34;,&#34;latitude&#34;:&#34;65.06 N&#34;,&#34;longitude&#34;:&#34;151.15 W&#34;,&#34;depth&#34;:&#34;19 km&#34;,&#34;magnitude&#34;:&#34;2.5&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;NORTHERN ALASKA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 05:08&#34;},{&#34;event_number&#34;:&#34;1175120&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175120&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:37:01.6&#34;,&#34;time_ago&#34;:&#34;2hr 51min ago&#34;,&#34;latitude&#34;:&#34;36.69 N&#34;,&#34;longitude&#34;:&#34;4.61 W&#34;,&#34;depth&#34;:&#34;76 km&#34;,&#34;magnitude&#34;:&#34;2.2&#34;,&#34;magnitude_type&#34;:&#34;mb&#34;,&#34;location&#34;:&#34;STRAIT OF GIBRALTAR&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 05:13&#34;},{&#34;event_number&#34;:&#34;1175111&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175111&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:33:18.0&#34;,&#34;time_ago&#34;:&#34;2hr 54min ago&#34;,&#34;latitude&#34;:&#34;21.91 S&#34;,&#34;longitude&#34;:&#34;68.51 W&#34;,&#34;depth&#34;:&#34;125 km&#34;,&#34;magnitude&#34;:&#34;2.5&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;ANTOFAGASTA, CHILE&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 04:43&#34;},{&#34;event_number&#34;:&#34;1175109&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175109&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:30:23.7&#34;,&#34;time_ago&#34;:&#34;2hr 57min ago&#34;,&#34;latitude&#34;:&#34;39.50 N&#34;,&#34;longitude&#34;:&#34;24.66 E&#34;,&#34;depth&#34;:&#34;6 km&#34;,&#34;magnitude&#34;:&#34;2.4&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;AEGEAN SEA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:44&#34;},{&#34;event_number&#34;:&#34;1175110&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175110&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:27:05.0&#34;,&#34;time_ago&#34;:&#34;3hr 01min ago&#34;,&#34;latitude&#34;:&#34;9.54 S&#34;,&#34;longitude&#34;:&#34;109.88 E&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;3.9&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;SOUTH OF JAVA, INDONESIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 04:40&#34;},{&#34;event_number&#34;:&#34;1175117&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175117&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:05:36.8&#34;,&#34;time_ago&#34;:&#34;3hr 22min ago&#34;,&#34;latitude&#34;:&#34;37.13 N&#34;,&#34;longitude&#34;:&#34;4.07 W&#34;,&#34;depth&#34;:&#34;13 km&#34;,&#34;magnitude&#34;:&#34;1.5&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SPAIN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 05:05&#34;},{&#34;event_number&#34;:&#34;1175105&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175105&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;04:00:43.9&#34;,&#34;time_ago&#34;:&#34;3hr 27min ago&#34;,&#34;latitude&#34;:&#34;35.68 S&#34;,&#34;longitude&#34;:&#34;178.77 E&#34;,&#34;depth&#34;:&#34;214 km&#34;,&#34;magnitude&#34;:&#34;3.0&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;OFF E. COAST OF N. ISLAND, N.Z.&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 04:05&#34;},{&#34;event_number&#34;:&#34;1175101&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175101&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;03:46:35.4&#34;,&#34;time_ago&#34;:&#34;3hr 41min ago&#34;,&#34;latitude&#34;:&#34;19.21 N&#34;,&#34;longitude&#34;:&#34;155.40 W&#34;,&#34;depth&#34;:&#34;38 km&#34;,&#34;magnitude&#34;:&#34;2.7&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;ISLAND OF HAWAII, HAWAII&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 04:54&#34;},{&#34;event_number&#34;:&#34;1175104&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175104&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;03:44:15.1&#34;,&#34;time_ago&#34;:&#34;3hr 43min ago&#34;,&#34;latitude&#34;:&#34;18.28 N&#34;,&#34;longitude&#34;:&#34;67.01 W&#34;,&#34;depth&#34;:&#34;36 km&#34;,&#34;magnitude&#34;:&#34;2.5&#34;,&#34;magnitude_type&#34;:&#34;Md&#34;,&#34;location&#34;:&#34;PUERTO RICO&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 04:03&#34;},{&#34;event_number&#34;:&#34;1175100&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175100&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;03:26:38.0&#34;,&#34;time_ago&#34;:&#34;4hr 01min ago&#34;,&#34;latitude&#34;:&#34;8.65 S&#34;,&#34;longitude&#34;:&#34;76.01 W&#34;,&#34;depth&#34;:&#34;18 km&#34;,&#34;magnitude&#34;:&#34;4.2&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;CENTRAL PERU&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 03:40&#34;},{&#34;event_number&#34;:&#34;1175103&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175103&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;03:15:28.2&#34;,&#34;time_ago&#34;:&#34;4hr 12min ago&#34;,&#34;latitude&#34;:&#34;37.16 N&#34;,&#34;longitude&#34;:&#34;4.07 W&#34;,&#34;depth&#34;:&#34;8 km&#34;,&#34;magnitude&#34;:&#34;2.2&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SPAIN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 03:56&#34;},{&#34;event_number&#34;:&#34;1175102&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175102&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;03:12:17.6&#34;,&#34;time_ago&#34;:&#34;4hr 15min ago&#34;,&#34;latitude&#34;:&#34;18.91 N&#34;,&#34;longitude&#34;:&#34;66.52 W&#34;,&#34;depth&#34;:&#34;48 km&#34;,&#34;magnitude&#34;:&#34;3.4&#34;,&#34;magnitude_type&#34;:&#34;Md&#34;,&#34;location&#34;:&#34;PUERTO RICO REGION&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 03:53&#34;},{&#34;event_number&#34;:&#34;1175099&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175099&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;03:11:48.3&#34;,&#34;time_ago&#34;:&#34;4hr 16min ago&#34;,&#34;latitude&#34;:&#34;37.17 N&#34;,&#34;longitude&#34;:&#34;4.07 W&#34;,&#34;depth&#34;:&#34;4 km&#34;,&#34;magnitude&#34;:&#34;2.1&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SPAIN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 03:35&#34;},{&#34;event_number&#34;:&#34;1175096&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175096&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;03:07:30.0&#34;,&#34;time_ago&#34;:&#34;4hr 20min ago&#34;,&#34;latitude&#34;:&#34;40.30 N&#34;,&#34;longitude&#34;:&#34;139.00 E&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;4.4&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;NEAR WEST COAST OF HONSHU, JAPAN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 03:15&#34;},{&#34;event_number&#34;:&#34;1175097&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175097&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;03:03:33.4&#34;,&#34;time_ago&#34;:&#34;4hr 24min ago&#34;,&#34;latitude&#34;:&#34;28.13 N&#34;,&#34;longitude&#34;:&#34;16.23 W&#34;,&#34;depth&#34;:&#34;4 km&#34;,&#34;magnitude&#34;:&#34;1.8&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;CANARY ISLANDS, SPAIN REGION&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 03:18&#34;},{&#34;event_number&#34;:&#34;1175098&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175098&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:59:30.0&#34;,&#34;time_ago&#34;:&#34;4hr 28min ago&#34;,&#34;latitude&#34;:&#34;18.45 N&#34;,&#34;longitude&#34;:&#34;103.67 W&#34;,&#34;depth&#34;:&#34;13 km&#34;,&#34;magnitude&#34;:&#34;4.0&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;OFFSHORE MICHOACAN, MEXICO&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 03:20&#34;},{&#34;event_number&#34;:&#34;1175091&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175091&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:43:05.0&#34;,&#34;time_ago&#34;:&#34;4hr 45min ago&#34;,&#34;latitude&#34;:&#34;8.29 S&#34;,&#34;longitude&#34;:&#34;117.98 E&#34;,&#34;depth&#34;:&#34;16 km&#34;,&#34;magnitude&#34;:&#34;2.8&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;SUMBAWA REGION, INDONESIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:50&#34;},{&#34;event_number&#34;:&#34;1175085&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175085&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:23:01.5&#34;,&#34;time_ago&#34;:&#34;5hr 05min ago&#34;,&#34;latitude&#34;:&#34;39.19 S&#34;,&#34;longitude&#34;:&#34;174.87 E&#34;,&#34;depth&#34;:&#34;29 km&#34;,&#34;magnitude&#34;:&#34;3.0&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;NORTH ISLAND OF NEW ZEALAND&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:25&#34;},{&#34;event_number&#34;:&#34;1175092&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175092&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:18:01.3&#34;,&#34;time_ago&#34;:&#34;5hr 10min ago&#34;,&#34;latitude&#34;:&#34;39.62 N&#34;,&#34;longitude&#34;:&#34;1.13 W&#34;,&#34;depth&#34;:&#34;1 km&#34;,&#34;magnitude&#34;:&#34;1.5&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SPAIN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:50&#34;},{&#34;event_number&#34;:&#34;1175084&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175084&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:15:22.5&#34;,&#34;time_ago&#34;:&#34;5hr 12min ago&#34;,&#34;latitude&#34;:&#34;35.39 N&#34;,&#34;longitude&#34;:&#34;25.63 E&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;2.0&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;CRETE, GREECE&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:43&#34;},{&#34;event_number&#34;:&#34;1175086&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175086&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:12:48.0&#34;,&#34;time_ago&#34;:&#34;5hr 15min ago&#34;,&#34;latitude&#34;:&#34;8.80 S&#34;,&#34;longitude&#34;:&#34;76.00 W&#34;,&#34;depth&#34;:&#34;14 km&#34;,&#34;magnitude&#34;:&#34;4.1&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;CENTRAL PERU&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:25&#34;},{&#34;event_number&#34;:&#34;1175082&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175082&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:03:45.0&#34;,&#34;time_ago&#34;:&#34;5hr 24min ago&#34;,&#34;latitude&#34;:&#34;22.36 S&#34;,&#34;longitude&#34;:&#34;67.70 W&#34;,&#34;depth&#34;:&#34;206 km&#34;,&#34;magnitude&#34;:&#34;3.1&#34;,&#34;magnitude_type&#34;:&#34;M&#34;,&#34;location&#34;:&#34;POTOSI, BOLIVIA&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:15&#34;},{&#34;event_number&#34;:&#34;1175083&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175083&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:00:39.0&#34;,&#34;time_ago&#34;:&#34;5hr 27min ago&#34;,&#34;latitude&#34;:&#34;8.56 S&#34;,&#34;longitude&#34;:&#34;76.07 W&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;4.5&#34;,&#34;magnitude_type&#34;:&#34;mb&#34;,&#34;location&#34;:&#34;CENTRAL PERU&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:46&#34;},{&#34;event_number&#34;:&#34;1175081&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175081&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;02:00:10.1&#34;,&#34;time_ago&#34;:&#34;5hr 27min ago&#34;,&#34;latitude&#34;:&#34;37.14 N&#34;,&#34;longitude&#34;:&#34;4.10 W&#34;,&#34;depth&#34;:&#34;11 km&#34;,&#34;magnitude&#34;:&#34;1.5&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SPAIN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:14&#34;},{&#34;event_number&#34;:&#34;1175090&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175090&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;01:58:14.1&#34;,&#34;time_ago&#34;:&#34;5hr 29min ago&#34;,&#34;latitude&#34;:&#34;37.15 N&#34;,&#34;longitude&#34;:&#34;4.06 W&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;2.1&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SPAIN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:48&#34;},{&#34;event_number&#34;:&#34;1175079&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175079&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;01:58:05.2&#34;,&#34;time_ago&#34;:&#34;5hr 29min ago&#34;,&#34;latitude&#34;:&#34;19.42 N&#34;,&#34;longitude&#34;:&#34;155.29 W&#34;,&#34;depth&#34;:&#34;7 km&#34;,&#34;magnitude&#34;:&#34;2.1&#34;,&#34;magnitude_type&#34;:&#34;Md&#34;,&#34;location&#34;:&#34;ISLAND OF HAWAII, HAWAII&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:01&#34;},{&#34;event_number&#34;:&#34;1175087&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175087&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;01:56:43.9&#34;,&#34;time_ago&#34;:&#34;5hr 31min ago&#34;,&#34;latitude&#34;:&#34;37.15 N&#34;,&#34;longitude&#34;:&#34;4.04 W&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;2.1&#34;,&#34;magnitude_type&#34;:&#34;ML&#34;,&#34;location&#34;:&#34;SPAIN&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 02:37&#34;},{&#34;event_number&#34;:&#34;1175077&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175077&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;01:48:48.6&#34;,&#34;time_ago&#34;:&#34;5hr 39min ago&#34;,&#34;latitude&#34;:&#34;8.68 S&#34;,&#34;longitude&#34;:&#34;75.90 W&#34;,&#34;depth&#34;:&#34;10 km&#34;,&#34;magnitude&#34;:&#34;4.6&#34;,&#34;magnitude_type&#34;:&#34;mb&#34;,&#34;location&#34;:&#34;CENTRAL PERU&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 06:44&#34;},{&#34;event_number&#34;:&#34;1175078&#34;,&#34;link&#34;:&#34;https://www.emsc-csem.org/Earthquake/earthquake.php?id=1175078&#34;,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;time&#34;:&#34;01:43:37.8&#34;,&#34;time_ago&#34;:&#34;5hr 44min ago&#34;,&#34;latitude&#34;:&#34;32.46 N&#34;,&#34;longitude&#34;:&#34;102.04 W&#34;,&#34;depth&#34;:&#34;5 km&#34;,&#34;magnitude&#34;:&#34;3.1&#34;,&#34;magnitude_type&#34;:&#34;mb&#34;,&#34;location&#34;:&#34;WESTERN TEXAS&#34;,&#34;testimonies&#34;:&#34;&#34;,&#34;testimonies_link&#34;:&#34;&#34;,&#34;updated&#34;:&#34;2022-10-03 01:56&#34;}] . package com.nighthawk.spring_portfolio.mvc.covid; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | package com.nighthawk.spring_portfolio.mvc.covid; illegal start of expression .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/09/28/java-api.html",
            "relUrl": "/jupyter/2022/09/28/java-api.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Arrays and Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . De-Elongates Pictures . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=4) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 220) { str = &quot;.&quot;; } else if (g &gt;= 220) { str = &quot;-&quot;; } else if (g &gt;= 210) { str = &quot;~&quot;; } else if (g &gt;= 200) { str = &quot;;&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 180) { str = &quot;|&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 160) { str = &quot;[&quot;; } else if (g &gt;= 150) { str = &quot;1&quot;; } else if (g &gt;= 140) { str = &quot;3&quot;; } else if (g &gt;= 130) { str = &quot;$&quot;; } else if (g &gt;= 120) { str = &quot;R&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png . GreyScale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGrey() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col // .getGreen() * 0.11))); int r = (int) (col.getRed() * 0.299); int g = (int) (col.getGreen() * 0.587); int b = (int) (col.getBlue() * 0.114); Color greyScale = new Color( r + g + b, r + g + b, r + g + b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToGrey(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); // pumpkin.printStats(&quot;Original&quot;); // pumpkin.resize(33); // pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToGrey(); } } Pics.main(null); . . GreenScale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGrey() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col // .getGreen() * 0.11))); int r = (int) (col.getRed() * 0); int g = (int) (col.getGreen()); int b = (int) (col.getBlue() * 0); Color greyScale = new Color( r, g, b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToGrey(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); // pumpkin.printStats(&quot;Original&quot;); // pumpkin.resize(33); // pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToGrey(); } } Pics.main(null); . . Red Scale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGrey() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col // .getGreen() * 0.11))); int r = (int) (col.getRed() ); int g = (int) (col.getGreen()*0); int b = (int) (col.getBlue()*0); Color greyScale = new Color( r, g, b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToGrey(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); // pumpkin.printStats(&quot;Original&quot;); // pumpkin.resize(33); // pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToGrey(); } } Pics.main(null); . . BlueScale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGrey() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col // .getGreen() * 0.11))); int r = (int) (col.getRed()*0 ); int g = (int) (col.getGreen()*0); int b = (int) (col.getBlue()); Color greyScale = new Color( r, g, b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToGrey(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); // pumpkin.printStats(&quot;Original&quot;); // pumpkin.resize(33); // pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToGrey(); } } Pics.main(null); . . Inverting Colors . I did this by making the algorithm find the opposite RGB values and assign it to each pixel. The implementation of this was just to subtract each RGB value from 255 . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyFile = this.outDir + name + &quot;.png&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToGrey() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); // double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col // .getGreen() * 0.11))); int r = (int) (col.getRed() ); int g = (int) (col.getGreen()); int b = (int) (col.getBlue()); Color greyScale = new Color( 255-r, 255-g, 255-b); img.setRGB(j, i, greyScale.getRGB()); } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } //write image try{ File file = new File(this.greyFile); ImageIO.write(img, &quot;png&quot;, file); }catch(IOException e){ System.out.println(e); } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); // monaLisa.printStats(&quot;Original&quot;); // monaLisa.resize(33); // monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToGrey(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); // pumpkin.printStats(&quot;Original&quot;); // pumpkin.resize(33); // pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToGrey(); } } Pics.main(null); . .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/09/28/imagearrays.html",
            "relUrl": "/jupyter/2022/09/28/imagearrays.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "JavaScript Lesson",
            "content": "Javascript . Main Class . // define a function to hold data for a Person function Schedule(class, period, teacher) { this.class = class; this.period = period; this.teacher = teacher; this.role = &quot;&quot;; } // define a setter for role in Person data Schedule.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Schedule.prototype.toJSON = function() { const obj = {class: this.class, period: this.period, teacher: this.teacher, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } var mainset = new Schedule(&quot;Statistics&quot;, &quot;3&quot;, &quot;Deputron&quot;); // object type is easy to work with in JavaScript logItType(mainset); // before role logItType(mainset.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher mainset.setRole(&quot;Main Set&quot;); // set the role logItType(mainset); logItType(mainset.toJSON()); . Array . var animals = [ new Person(&quot;Cow&quot;, &quot;moo&quot;, &quot;black and white&quot;), new Person(&quot;Dog&quot;, &quot;ruff&quot;, &quot;many colors&quot;), new Person(&quot;Cat&quot;, &quot;meow&quot;, &quot;many colors&quot;), new Person(&quot;Giraffe&quot;, &quot;idk&quot;, &quot;brown and yellow&quot;), new Person(&quot;Mouse&quot;, &quot;squeak&quot;, &quot;gray&quot;) ]; function Farm(home, animals){ = home.setRole(&quot;Home&quot;); this.home = home; this.Farm = [home]; this.animals = animals; this.animals.forEach(animal =&gt; { animal.setRole(&quot;Animal&quot;); this.Farm.push(animals); }); // build json/string format of Classroom this.json = []; this.Farm.forEach(thing =&gt; this.json.push(thing.toJSON())); } // make a CompSci classroom from formerly defined teacher and students barn = new Farm(home, animals); // output of Objects and JSON in CompSci classroom logItType(barn.home); // constructed classroom object logItType(barn.home[0].name); // abstract 1st objects name logItType(barn.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(barn.json[0])); // show JSON.parse inverse of JSON.stringify . HTML . Set.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Period&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Teacher&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in math.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + math.classroom[row].numbers + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + math.classroom[row].mean + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + math.classroom[row].mode + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(math._toHtml()); .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/markdown/2022/09/25/javascript.html",
            "relUrl": "/markdown/2022/09/25/javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Fibonacci",
            "content": "Normal . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop . public class fiboFor extends Fibo { public fiboFor() { this(10); } public fiboFor(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected void init(){ this.name = &quot;For Loop&quot;; this.setData(0); this.setData(1); for(int i = 2; i &lt;= this.size; ++i){ this.setData(this.list.get(i-2)+this.list.get(i-1)); } } static public void main(String[] args) { fiboFor fib = new fiboFor(); fib.print(); } } fiboFor.main(null); . Init method = For Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0], 22=[0, 1], 23=[0, 1, 1], 24=[0, 1, 1, 2], 25=[0, 1, 1, 2, 3], 26=[0, 1, 1, 2, 3, 5], 27=[0, 1, 1, 2, 3, 5, 8], 28=[0, 1, 1, 2, 3, 5, 8, 13], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21], 30=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 31=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . While Loop . public class fiboWhile extends Fibo { public fiboWhile() { this(10); } public fiboWhile(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.init(); } protected void init(){ this.name = &quot;While Loop&quot;; this.setData(0); this.setData(1); int i = 2; while(i &lt;= this.size){ this.setData(this.list.get(i-2)+this.list.get(i-1)); i++; } } static public void main(String[] args) { fiboWhile fib = new fiboWhile(); fib.print(); } } fiboWhile.main(null); . Init method = While Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0], 22=[0, 1], 23=[0, 1, 1], 24=[0, 1, 1, 2], 25=[0, 1, 1, 2, 3], 26=[0, 1, 1, 2, 3, 5], 27=[0, 1, 1, 2, 3, 5, 8], 28=[0, 1, 1, 2, 3, 5, 8, 13], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21], 30=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 31=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Recursion . public class fiboRecursion extends Fibo { public fiboRecursion() { this(10); } public fiboRecursion(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } protected void init(){ this.name = &quot;Recursion&quot;; for(int n = 0; n &lt; this.size; n++){ this.setData(this.calc(n)); } } public int calc(int n) { if (n &lt; 2) { return n; } return this.calc(n-2) + this.calc(n-1); } static public void main(String[] args) { fiboRecursion fib = new fiboRecursion(); fib.print(); } } fiboRecursion.main(null); . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0], 21=[0, 1], 22=[0, 1, 1], 23=[0, 1, 1, 2], 24=[0, 1, 1, 2, 3], 25=[0, 1, 1, 2, 3, 5], 26=[0, 1, 1, 2, 3, 5, 8], 27=[0, 1, 1, 2, 3, 5, 8, 13], 28=[0, 1, 1, 2, 3, 5, 8, 13, 21], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/09/25/fibonaci.html",
            "relUrl": "/jupyter/2022/09/25/fibonaci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "AP FRQ Lesson",
            "content": "FRQ Lesson: Methods and Control Structures . Methods . A method is something to be declared within a class. It only runs when it is called and you can pass parameters in a method. Methods are used to perform functions, and they are helpful since you can reuse code. . Calling a method . public class Main { static void myMethod() { //code to be executed } } . Initializing a Method . private static void myFunction() { // function body } . CB Example . . Control Structures . If/Else/Else If . if (count &gt; 5) { System.out.println(&quot;Count is higher than 5&quot;); } else if (count &gt; 2) { System.out.println(&quot;Count is higher than 2&quot;); } else { System.out.println(&quot;Count is lower than 2&quot;); } . Switch . int count = 3; switch (count) { case 0: System.out.println(&quot;Count is equal to 0&quot;); break; case 1: System.out.println(&quot;Count is equal to 1&quot;); break; default: System.out.println(&quot;Count is either negative, or higher than 1&quot;); break; } . Loops . for (int i = 1; i &lt;= 50; i++) { methodToRepeat(); } int whileCounter = 1; while (whileCounter &lt;= 50) { methodToRepeat(); whileCounter++; } . College Board Requirements . College board questions will include the following . a for-loop that probably uses the method’s parameter variables, . | an if statement, probably inside the loop, . | calls to other class methods given to you, . | a numerical or string value that is calculated by the loop and returned at the end of the method. . | if the question has 2 parts, 1 part will probably require a loop and the other just an expression . | . College board specifically says: . Helpful Links . Khan Academy AP Live Review .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/markdown/2022/09/19/frqlesson.html",
            "relUrl": "/markdown/2022/09/19/frqlesson.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "2D Arrays",
            "content": "Change or Add Data to the 2D arrays . class DataLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] animals; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public DataLoop() { //Storing Data in 2D arrays animals = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //mouse 0 { &quot;(o)_(o)&quot;, &quot;(=&#39;x&#39;=)&quot;, &quot;|_(&#39;)(&#39;)&quot;, &quot;________&quot; }, //koala 1 { &quot;( o)_____( o)&quot;, &quot; ( &#39;(Y)&#39; )&quot;, &quot; c(&#39;)_(&#39;)&quot;, &quot; ____________&quot; }, //dog 2 { &quot; _______&quot;, &quot;(| . . |)&quot;, &quot; ( (Y) )&quot;, &quot; (&#39;&#39;)_(&#39;&#39;)_/&quot; }, //baby bear 3 { &quot; _______&quot;, &quot;(| . . |)&quot;, &quot; ( (Y) )&quot;, &quot; (&#39;&#39;)_(&#39;&#39;)_/&quot; }, { &quot; __ ( _ &quot;, //[4][0] &quot; (_ ( &#39;&gt; &quot;, //[4][1] &quot; ) /_)= &quot;, //[4][2] &quot; (_(_ )_ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot; Animals &quot;); int animalCount = animals.length; //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; animalCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; animals[row].length; col++) { // prints specific part of the monkey from the column System.out.print(animals[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new DataLoop().printPoem(); //a new monkey list and output in one step } } DataLoop.main(null); . Animals (o)_(o) (=&#39;x&#39;=) |_(&#39;)(&#39;) ________ ( o)_____( o) ( &#39;(Y)&#39; ) c(&#39;)_(&#39;) ____________ _______ (| . . |) ( (Y) ) (&#39;&#39;)_(&#39;&#39;)_/ _______ (| . . |) ( (Y) ) (&#39;&#39;)_(&#39;&#39;)_/ __ ( _ (_ ( &#39;&gt; ) /_)= (_(_ )_ 0000000000000000000000000000000000 THE END . Displaying Data Horizontally . import java.util.*; public class AnimalLoop { String[][] animals = { //cat 0 { &quot;(o)_(o)&quot;, &quot;(=&#39;x&#39;=)&quot;, &quot;|_(&#39;)(&#39;)&quot;, &quot;________&quot; }, //bird 1 { &quot;( o)_____( o)&quot;, &quot; ( &#39;(Y)&#39; )&quot;, &quot; c(&#39;)_(&#39;)&quot;, &quot; ____________&quot; }, //spider 2 { &quot; _______&quot;, &quot;(| . . |)&quot;, &quot; ( (Y) )&quot;, &quot; (&#39;&#39;)_(&#39;&#39;)_/&quot; }, //cow 3 { &quot;O-- --O&quot;, &quot;( &#39;(Y)&#39; )&quot;, &quot;(_u____u)&quot;, &quot;_________&quot; }, //squirrel 4 { &quot; __ ( _ &quot;, //[4][0] &quot; (_ ( &#39;&gt; &quot;, //[4][1] &quot; ) /_)= &quot;, //[4][2] &quot; (_(_ )_ &quot; //[4][3] }, }; public void printAnimals () { for (int animalCount = animals.length; animalCount &gt;= 1; animalCount--) { for (int i = 0; i&lt;4; i++) { for (int j = 0; j&lt;animalCount; j++) { System.out.print(animals[j][i] + &quot; &quot;); } System.out.println(); } System.out.println(); } } } AnimalLoop animal = new AnimalLoop(); animal.printAnimals(); . (o)_(o) ( o)_____( o) _______ O-- --O __ ( _ (=&#39;x&#39;=) ( &#39;(Y)&#39; ) (| . . |) ( &#39;(Y)&#39; ) (_ ( &#39;&gt; |_(&#39;)(&#39;) c(&#39;)_(&#39;) ( (Y) ) (_u____u) ) /_)= ________ ____________ (&#39;&#39;)_(&#39;&#39;)_/ _________ (_(_ )_ (o)_(o) ( o)_____( o) _______ O-- --O (=&#39;x&#39;=) ( &#39;(Y)&#39; ) (| . . |) ( &#39;(Y)&#39; ) |_(&#39;)(&#39;) c(&#39;)_(&#39;) ( (Y) ) (_u____u) ________ ____________ (&#39;&#39;)_(&#39;&#39;)_/ _________ (o)_(o) ( o)_____( o) _______ (=&#39;x&#39;=) ( &#39;(Y)&#39; ) (| . . |) |_(&#39;)(&#39;) c(&#39;)_(&#39;) ( (Y) ) ________ ____________ (&#39;&#39;)_(&#39;&#39;)_/ (o)_(o) ( o)_____( o) (=&#39;x&#39;=) ( &#39;(Y)&#39; ) |_(&#39;)(&#39;) c(&#39;)_(&#39;) ________ ____________ (o)_(o) (=&#39;x&#39;=) |_(&#39;)(&#39;) ________ . Display Data Backwards . import java.util.*; public class Animals { String[][] animals = { //cat 0 { &quot;(o)_(o)&quot;, &quot;(=&#39;x&#39;=)&quot;, &quot;|_(&#39;)(&#39;)&quot;, &quot;________&quot; }, //bird 1 { &quot;( o)_____( o)&quot;, &quot; ( &#39;(Y)&#39; )&quot;, &quot; c(&#39;)_(&#39;)&quot;, &quot; ____________&quot; }, //spider 2 { &quot; _______&quot;, &quot;(| . . |)&quot;, &quot; ( (Y) )&quot;, &quot; (&#39;&#39;)_(&#39;&#39;)_/&quot; }, //cow 3 { &quot;O-- --O&quot;, &quot;( &#39;(Y)&#39; )&quot;, &quot;(_u____u)&quot;, &quot;_________&quot; }, //squirrel 4 { &quot; __ ( _ &quot;, //[4][0] &quot; (_ ( &#39;&gt; &quot;, //[4][1] &quot; ) /_)= &quot;, //[4][2] &quot; (_(_ )_ &quot; //[4][3] }, }; public void printBackwards () { for (int row = animals.length-1; row&gt;=0; row--) { for (int col = 0; col&lt;animals[0].length; col++){ System.out.println(animals[row][col]+ &quot; &quot;); } System.out.println(); } } } Animals animal = new Animals(); animal.printBackwards(); . __ ( _ (_ ( &#39;&gt; ) /_)= (_(_ )_ O-- --O ( &#39;(Y)&#39; ) (_u____u) _________ _______ (| . . |) ( (Y) ) (&#39;&#39;)_(&#39;&#39;)_/ ( o)_____( o) ( &#39;(Y)&#39; ) c(&#39;)_(&#39;) ____________ (o)_(o) (=&#39;x&#39;=) |_(&#39;)(&#39;) ________ .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/09/15/2Darrays.html",
            "relUrl": "/jupyter/2022/09/15/2Darrays.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Free Response Question No. 1",
            "content": "2019 FRQs . 1) The APCalender class contains methods used to calculate information about a calender. You will write two methods of the class. . a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. . pubic static int numberOfLeapYear (int year1, int year2) { int count = 0; for (int y = year1; y &lt;= year2; y++) { if (isLeapYear (y)) ( count ++; ) } return count; } . b) Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . public static int daysOfWeek (int month, int day, int year) { int startDay = firstDayOfYear(year); int nthDay = dayOfYear(month, day, year); int returnDay = (startDay + nthDay - 1) % 7; return returnDay; } .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/09/13/apfrq.html",
            "relUrl": "/jupyter/2022/09/13/apfrq.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Resume",
            "content": "EDUCATION . Del Norte High School . Institution/Place of Education . 2019 - Present, GPA: 4.2 Relevant Courses . AP Calculus AB/BC AP Computer Science AP Chemistry AP Physics . EXTRACIRRICULARS . CyberPatriot . CyberAegis . 2018 - Present, . International Organization that aims to inspire students to learn about cybersecurity and networking protocols by challenging them with difficult scenarios . Achievements/Tasks . - Captain of multiple successful teams that have made it to the top 10 internationally in the semifinals. . Vice President of Applied Physics Club Del Norte High School . 2021 - Present, . Club that exists to instill passion about physics in high school students as well as middle school students. . Achievements/Tasks . - Organized and planned multiple trips to . neighboring middle school program to . conduct workshops with students . - led the teams and participated in the F=MA . competition that required a decent . understanding of physics material that was . taught . - Efficiently trained and led numerous . students from the pre-prepared curriculum . that ranged from the basics of physics to . intermediate/advanced levels . - successfully kept inventory of students and . roles of each person . Languages . English . Native or Bilingual Proficiency . Spanish . Full Professional Proficiency . SKILLS . JavaScript Python Java . Full Stack Development Advanced Cyber Security . PERSONAL PROJECTS . SAAS Emergency . A website that is being built for my school with 3 others that aims to digitalize the evacuation process for teachers. Meant to simplify the routine of attendance, various routes, and procedures in case of emergencies. Plans in motion to implement it permanently into our school’s program . STUDY.CALM . a website that was built with numerous study features as a hub for students who require help with school affiliated problems as well as helpful studying tips . Leader of Communications . Girls in Computer Science – Del Norte High School 2020- Present . Club that focuses on implementing a place for Girls in STEM fields to feel heard and acknowledged . Achievements/Tasks . - Planed many workshops in nearby libraries and created programs for elementary students in computer science . - Drafted numerous teaching plans for said workshops to keep organized during busy days . Speech and Debate . 2019-Present . - Carefully have curated my debating and . public speaking skills through hours of prep . and practice . - Participate in the Congress division and on . the road to become president of that section . ACHIEVEMENTS . - Junior Black belt Tae Kwan Do . - Advanced skills: Indian Classical Dance Bharathanatyam .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/09/12/resume.html",
            "relUrl": "/2022/09/12/resume.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Harvard Key Takeaways",
            "content": "Yale Video: Psychology and the Good Life Takeaways . just because students are very smart doesn’t mean their mental health is good | the ability to control our happiness is within our grasps | don’t get discouraged by the bad things that happen, continue living your life | make sure to get enough sleep and exercise since those stimulate our bodies | be present in the moment and live without worrying about the future | a social connection can happen with anyone, a close friend or a stranger | make time for gratitude | . My Personal Goals . don’t stay up too late | eat 3 meals a day | don’t procrastinate and stress yourself out | . GOals in Conjunction with Happy People . time management is important | working with someone else is beneficial | relying on pure talent is only so helpful; put in the work | . Gratitude List . my family | my teachers | my friends | my privilege | . Gratitude Note . I am most grateful for my APEL teacher Mrs. Dafoe. She taught me so much and pushed me to always look for a deeper meaning. I connected with her differently than my other teachers since she knows me so well. She’s also writing a letter of recommendation for me so I’m very grateful for that. . I am very grateful for my dad since he always makes sure I’m on top of things and that I’m staying responsible. When I need help with school work or my job, he’s always ready to help. .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/markdown/2022/09/11/gratitude.html",
            "relUrl": "/markdown/2022/09/11/gratitude.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "If and Booleans",
            "content": "// All of the boolean expressions below evaluate to true if (true) { System.out.println(&quot;True code block&quot;); } if (true &amp;&amp; !false) { System.out.println(&quot;True and Not False code block&quot;); } if (true || false) { System.out.println(&quot;True or False code block&quot;); } if ((true &amp;&amp; !false) &amp;&amp; (true || false)) { System.out.println(&quot;Confusing code block&quot;); } if (!((false || !true) || (false &amp;&amp; true))) { System.out.println(&quot;De Morgan&#39;s law in my head of confusing code block&quot;); } // Can any of the above expression be simplified? What would they simplify to? Are any of these expressions useful? . True code block True and Not False code block True or False code block Confusing code block De Morgan&#39;s law in my head of confusing code block . If . If is used when you want something to only happen if a condition is true . if(true) { System.out.println(&quot;true&quot;); } . true . If-Else . If-else is used when there is only two cases you want to happen. If the condition is true, one t hing happens, else, the other case happens. . if(false) { System.out.println(&quot;true&quot;); } else { System.out.println(&quot;false&quot;); } . false . IF-elseif-else . If-elseif-else is used when there are more than two cases with different conditions you want to run. For every new case, you add a new elseif to the code segment . if(1 &gt; 2) { System.out.println(&quot;1+2=4&quot;); } else if(2 &gt; 1) { System.out.println(&quot;2+3=5&quot;); } else { System.out.println(&quot;2+2=3&quot;); } . 2+3=5 . If-elseif-elseif-elseif-else Case . 5 or more conditions . int x = 3; int y = 2; int z = 1; int a = 4; if(x &lt; y) { System.out.println(x); } else if(y &lt; z) { System.out.println(y); } else if(z &gt; a) { System.out.println(z); } else if(a &gt; z) { System.out.println(a); } else { System.out.print(&quot;No number&quot;); } . 4 . Switch-Case . class Variable{ public static void main(String[] args){ Scanner scan = new Scanner(System.in); System.out.println(&quot;Enter a number: &quot;); int num = scan.nextInt(); if (num &gt;= 100){ System.out.println(&quot;That&#39;s a big number&quot;); } else if (num &gt;= 70){ System.out.println(&quot;That&#39;s a nice number&quot;); } else if (num &gt;= 40){ System.out.println(&quot;That&#39;s a medium sized number&quot;); } else if (num &gt;= 10){ System.out.println(&quot;That&#39;s a small number&quot;); } else System.out.println(&quot;That&#39;s a tiny number&quot;); } } Variable.main(null) . Enter a number: That&#39;s a medium sized number . De Morgan&#39;s Law . Law of Union: The complement of the union of the two sets A and B will be equal to the intersection of A U B . class DeMorgans { public static void main (String[] args) { String state = &quot;OH&quot;; String state2 = &quot;AK&quot;; // !(false) == true if (!(state.equals(&quot;AK&quot;) || state.equals(&quot;HI&quot;))) { System.out.println(&quot;1) State is Not alaska or hawaii&quot;); } else { System.out.println(&quot;1) State is either Alaska or Hawaii&quot;); } if (!state.equals(&quot;AK&quot;) &amp;&amp; !state.equals(&quot;HI&quot;)) { System.out.println(&quot;2) State is no Alaska or Hawaii&quot;); } else { System.out.println(&quot;2) State is either Alaska or Hawaii&quot;); } } } DeMorgans.main(null) . 1) State is Not alaska or hawaii 2) State is no Alaska or Hawaii .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/09/07/week3.html",
            "relUrl": "/jupyter/2022/09/07/week3.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Matrix Multiplication",
            "content": "import java.util.Scanner; public class MatrixMultiplication { public static void main(String[] args) { int a, j, k, rowF, rowS, colF, colS; int first[][] = new int[10][10]; int second[][] = new int[10][10]; int product[][] = new int[10][10]; Scanner scanner = new Scanner(System.in); System.out.println(&quot;Enter Rows and Cols of First Matrix&quot;); rowF = scanner.nextInt(); colF = scanner.nextInt(); System.out.println(&quot;Enter Elements of First Matrix&quot;); // Input first matrix from user for (a = 0; a &lt; rowF; a++) { for (j = 0; j &lt; colF; j++) { first[a][j] = scanner.nextInt(); } } System.out.println(&quot;Enter Rows and Cols of Second Matrix&quot;); rowS = scanner.nextInt(); colS = scanner.nextInt(); System.out.println(&quot;Enter Elements of Second Matrix&quot;); // Input second matrix from user for (a = 0; a &lt; rowS; a++) { for (j = 0; j &lt; colS; j++) { second[a][j] = scanner.nextInt(); } } // Multiplying two matrices for (a = 0; a &lt; rowF; a++) { for (j = 0; j &lt; colF; j++) { for (k = 0; k &lt; colS; k++) { product[a][j] += first[a][k] * second[k][j]; } } } // Printing Product Matrix System.out.println(&quot;Product Matrix&quot;); for (a = 0; a &lt; rowF; a++) { for (j = 0; j &lt; colS; j++) { System.out.print(product[a][j] + &quot; &quot;); } System.out.print(&quot; n&quot;); } } } MatrixMultiplication.main(null) . Enter Rows and Cols of First Matrix .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2022/09/05/matrx.html",
            "relUrl": "/jupyter/2022/09/05/matrx.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Codeorg",
            "content": "Code.org Key Takeaways . Completion: . . Creating and Using Objects: . Key Takeaways: . | - writng headers . | public class Main() {} . | - creating sub classes . | Main main = new Main(); . | - writing methods . | public void method() {} . | - extending methods . | method(); . | - loops . | while(true) . | if(true) . | | Creating Objects . | - in java we create objects in order to call non-static functions that are not inside the main method we’re in . | - as long as it is inside the class we’re in, we can provide the name and extend the object . | - instance of a class . | - types of food within a meal . | | Extending Objects . | - public class Food extends vegetables {} . | | | ### Mainly from this unit in code.org, I learned the basics of java. I knew virtually nothing beforehand, so the simple tasks with the painter served as a great introductory for this programming language. . | . - .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/09/04/codeorg.html",
            "relUrl": "/2022/09/04/codeorg.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Title",
            "content": "import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...#################### 0: Goodbye, World! . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . java.awt.HeadlessException: No X11 DISPLAY variable was set, but this program performed an operation which requires it. at java.desktop/java.awt.GraphicsEnvironment.checkHeadless(GraphicsEnvironment.java:208) at java.desktop/java.awt.Window.&lt;init&gt;(Window.java:548) at java.desktop/java.awt.Frame.&lt;init&gt;(Frame.java:423) at java.desktop/java.awt.Frame.&lt;init&gt;(Frame.java:388) at java.desktop/javax.swing.JFrame.&lt;init&gt;(JFrame.java:180) at MenuJFrame.&lt;init&gt;(#23:1) at MenuJFrame.main(#23:1) at .(#26:1) . parallel processing | .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/08/30/TP1200.html",
            "relUrl": "/2022/08/30/TP1200.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Bash Checks",
            "content": "echo &quot;Varifiyng Java &quot; java --version echo &quot;Verifying Python&quot; python --version . Varifiyng Java openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) Verifying Python Python 3.9.12 . echo &quot;Verifying Anaconda&quot; conda list . Verifying Anaconda # packages in environment at /home/sarayu/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/fastpages/jupyter/2022/08/29/bash.html",
            "relUrl": "/fastpages/jupyter/2022/08/29/bash.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Civics Current Events (1)",
            "content": ". 08/26/22 . Event 1: Passage of a Bipartisan Gun Safety Law . The Bipartisan Safer Communities Act passed in Senate and HR . | Not many republicans voted for it . | Requires background checks to people under 21 who want to buy a gun . | Keeps guns away from umarries dating partners convicted of abuse . | Grants money to states to help this happen . | Dems believe the law did not go far enough . | Republicans don’t support it . | Explains legislative process . | . Event 2: Recession? . Economic indicated suggest we have experiences two successive quarters of declining economic activity . | Beginning stages of a recession . | Too early to call . | .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/08/29/Civics-Current-Events-(1).html",
            "relUrl": "/2022/08/29/Civics-Current-Events-(1).html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Alumni Panel Reflection",
            "content": "Alumni Panel Reflection . This alumni panel was very introspective and beneficial for me. Hearing that other people have the same issues and problems as me make it more worthwhile while I do this class. When Colin was talking about how he started CSA with no prior experience or knowledge and got to where he is now, it was very motivating since I too had little experience before CSP. Additionally, Mabel was talking about how it was hard for her to get motivated to do programming since there was always someone better who could do it faster and more efficiently. She talked about how once she got over that mental block, she was able to find a passion with CS and programming. This is very relatable to me because like Allison said, the temptation to just put the least amount of effort into my work is very real, but I know that to flourish and be successful in this class and in the future, I need to put in the work myself and hold myself accountable for my learning. . The alumni’s answers also made me appreciate the class structure we have right now. They talked a lot about how unorganized college CS can be and how hard it can get without structure. Their discussions with real life scenarios and applications of CS also gave me some hope since Mabel talked about how she went into aerospace engineering, something I want to do as well, with only CSA under her tool belt. She talked about how she was able to learn more in college, but how she wished she had done more in high school. With this information, I have more hope in my future career in college and high school since I know the things that I face are not unique to me, but are widespread across the board to hundreds of other people. .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/08/29/Alumni-Panel-Reflection.html",
            "relUrl": "/2022/08/29/Alumni-Panel-Reflection.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Primitives",
            "content": "public class primitives { public static void main(String[] args) { int i = 7; double d = 5.4; boolean b = false; String aString = &quot;Hello!&quot;; String astringFormal = new String(&quot;Hello, world&quot;); System.out.println(&quot;Int: &quot; + i); System.out.println(&quot;Double: &quot; + d); System.out.println(&quot;Boolean: &quot; + b); System.out.println(&quot;Wrapper String: &quot; + aString); System.out.println(&quot;Wrapper String Formal: &quot; + astringFormal); } } primitives.main(null) . Int: 7 Double: 5.4 Boolean: false Wrapper String: Hello! Wrapper String Formal: Hello, world . import java.util.Scanner; public class Conversion { public static void main(String args[]) { int dec_num, quot, i=1, j, choice; int bin_num[] = new int[100]; Scanner scan = new Scanner(System.in); while(true) { System.out.println(&quot;1: Convert to Binary&quot;); System.out.println(&quot;2: Quit&quot;); System.out.println(&quot;Your choice?&quot;); choice = scan.nextInt(); switch (choice) { case 1: System.out.print(&quot;Input a Decimal Number : &quot;); dec_num = scan.nextInt(); System.out.print(&quot;Number is: &quot; + dec_num); quot = dec_num; while(quot != 0) { bin_num[i++] = quot%2; quot = quot/2; } System.out.print(&quot;Binary number is: &quot;); for(j=i-1; j&gt;0; j--) { System.out.print(bin_num[j]); } System.out.print(&quot; n&quot;); break; case 2: System.exit(0); } } } } Conversion.main(null) . 1: Convert to Binary 2: Quit Your choice? Input a Decimal Number : Number is: 75Binary number is: 1001011 1: Convert to Binary 2: Quit Your choice? .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/fastpages/jupyter/2022/08/26/week1.html",
            "relUrl": "/fastpages/jupyter/2022/08/26/week1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Python Notebook",
            "content": "msg = &quot;hello&quot; print(msg) . hello .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/fastpages/jupyter/2022/08/22/Python.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/Python.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "My First Post",
            "content": "This is my first post .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/2022/08/22/My-First-Post.html",
            "relUrl": "/2022/08/22/My-First-Post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Java Jupyter Notebook",
            "content": "public class Hello { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } Hello.main(null); . Hello World! .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/fastpages/jupyter/2022/08/22/Java.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/Java.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sarayu-pr11.github.io/sarayucsa/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post47": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sarayu-pr11.github.io/sarayucsa/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Homework and Notes",
          "content": "Topic | Notes | Homework | . 01 Primitive Types | Notes | Homework | . 02 Using Objects | Notes | Homework | . 04 Iteration | Notes | Homework | . 05 Writing Classes | Notes | Homework | . 06 Array | Notes | Homework | . 07 Array | Notes | Homework | . 08 Array | Notes | Homework | . 09 Array | Notes | Homework | . 10 Array | Notes | Homework: Google Form | .",
          "url": "https://sarayu-pr11.github.io/sarayucsa/_pages/01_homework.html",
          "relUrl": "/_pages/01_homework.html",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi! My name is Sarayu Pochimireddy and this will be my website for the trimester where I will log all my work and progress. .",
          "url": "https://sarayu-pr11.github.io/sarayucsa/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Reflection",
          "content": "Trimester Reflection . This trimester I became more familiar with coding in java and fastpages. We started with code.org and I became proficient with the basics. Then we started with deployment. WSL and ubuntu became easier for me and I got better at troubleshooting problems in the terminal. . Fastpages . The deployment process got better and I was able to successfully deploy my projects. . Backend-Frontend . We used two different projects this trimester and we were able to connect features from our backend project to our frontend. We used this for our database and this is useful in the future for many things. . PBL . We learned many different coding techniques for our PBL features. .",
          "url": "https://sarayu-pr11.github.io/sarayucsa/reflection/",
          "relUrl": "/reflection/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "College Board Notes",
          "content": "Unit # | Notes | Tangibles |   |   | . Unit 1 |   |   |   |   | . Unit 2 |   |   |   |   | .",
          "url": "https://sarayu-pr11.github.io/sarayucsa/_pages/collegeboard.html",
          "relUrl": "/_pages/collegeboard.html",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sarayu-pr11.github.io/sarayucsa/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}